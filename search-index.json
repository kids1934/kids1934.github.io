[{"title":"每日搓安卓组件","date":"2025-05-18T06:42:36.000Z","url":"/2025/05/18/%E6%AF%8F%E6%97%A5%E6%90%93%E5%AE%89%E5%8D%93%E7%BB%84%E4%BB%B6/","categories":[["undefined",""]],"content":"本人跟着安卓开发者手册学下来，又自己找了一个项目跟着做，发现想在项目中融入自己的小idea这个过程并不是很顺利，去搜资料发现网上安卓相关资料并不多，问ai，ai有时也和我胡言乱语，所以为了记录学习安卓的各种问题，也算是为网上稀少的安卓开发相关资料贡献一份自己的力量，这篇博客就是展示一些自己做的小组件，我可能还会讲讲当时折磨我好久的原因是什么，希望避坑吧。 一. 搜索组件 使用BasicTextField定制化程度更高，我最开始一直在TextField的基础上稿，弄出的东西就很难看。 二. 轮播图组件 传入自己的ViewModel，使用ViewModel中的图片数据，在判断用户是否有自己滑动，如果滑动则不进行轮播这个部分，使用了debounce防抖处理快速连续的事件流，确保只对最后一个事件做出响应，并忽略中间的事件。我最开始没有使用这个导致状态不断切换使轮播图没有自动变换。 三. 轮播通知 通知的VerticalPager组件中没有verticalAlignment参数，所以要在text外包裹box使它内容居中，还有在最外层的Row中padding的顺序也很重要 四.底部翻页"},{"title":"golang并发编程","date":"2024-12-17T10:48:47.000Z","url":"/2024/12/17/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/","categories":[["undefined",""]],"content":"1.Goruntine和Changoruntine是go的协程，chan是为了实现goruntine之间的通讯，go并发的思想是通过通信来共享内存，而不是通过共享内存来通信。相比于java使用thread，goruntine更加轻量级，包含了CPU上下文。而对于并发安全问题，java使用各种同步机制如synchronized关键字、ReentrantLock、Semaphore等，来保证多线程程序的并发安全性。但是，使用Java进行线程管理需要手动管理线程的生命周期和资源，容易出现线程安全问题。Go语言通过Channel机制来保证goroutine之间的安全通信，使得并发编程更加简单和安全。由于Channel是一种基于消息传递的通信方式，因此不会出现死锁和资源竞争等问题。此外，Go语言的运行时系统会自动管理goroutine的调度和资源，减少了开发者的负担，提高了程序的稳定性和安全性。 避免数据竞争的三种方式： 不去写变量。读取不可能出现数据竞争。 避免从多个 goroutine 访问变量，尽量把变量限定在了一个单独的 goroutine 中。(使用 channel 来共享数据) 互斥锁 GoroutineGoroutine 是 Go 语言中实现并发的核心机制。它是一种轻量级的线程，拥有自己的栈空间和程序计数器，但与系统线程相比，它具有以下特点： 创建和销毁成本低：Goroutine 的创建和销毁只需很少的系统资源，因此可以轻松创建大量的 Goroutine。 调度：Go 语言的运行时会自动调度 Goroutine 在多个 CPU 上执行，充分利用多核 CPU 的资源。 非抢占式：Goroutine 是非抢占式的，这意味着它不会抢占其他 Goroutine 正在运行的 CPU 时间。 ChannelChannel 是 Go 语言中用于 goroutine 之间通信的管道。它可以用来传递数据、同步执行等。Channel 具有以下特点： 类型化：Channel 可以是特定类型的，这意味着只能发送和接收该类型的数据。 容量：Channel 可以有容量限制，这意味着它可以同时存储一定数量的数据。 阻塞：Channel 可以是阻塞的，这意味着如果尝试从空 Channel 中接收数据或向满 Channel 中发送数据，操作将会阻塞，直到有数据可供接收或有空间可供发送。当主协程接收到 10 个信号后，所有协程都已经完成任务，不会再向通道发送数据。此时，主协程尝试第 11 次从通道接收数据，由于通道中没有新的数据，且没有协程会再发送数据，主协程就会一直阻塞，最终导致死锁错误。而关闭通道可以向接收方表明不会再有新的数据发送到通道中。接收方在通道关闭后，仍然可以从通道中接收已有的数据，当所有数据都被接收后，接收操作会立即返回通道元素类型的零值和一个布尔值 false，表示通道已关闭。使用chan后要释放chan，否则会出现一直读取chan的情况，发生死锁（deadlock！！） 2.时机控制WaitGroup 3.流程控制Select 4.Mutex和Atomic防止data race问题（多线程竞争同一资源），做data race检查最好在go test中做 Mutex类似java中的锁（我感觉都一样） 5.sync包1.sync包工具:Mutex： 互斥锁RWMutex：读写锁WaitGroup：并发等待组Map：并发安全字典Once：单例模式Cond：同步等待条件Pool：临时对象池 2.sync.Mutex(互斥锁)sync.Mutex 的结构体：在默认状态下，互斥锁的所有状态位都是 0，int32 中的不同位分别表示了不同的状态： locked：表示这个锁是否被持有 woken：表示是否从有唤醒的 goroutine starving：表示此锁是否进入饥饿状态 waitersCount：表示等待此锁的 goroutine 的数量 饥饿模式请求锁的 goroutine 有两类，一类是新来请求锁的 goroutine，另一类是被唤醒的等待请求锁的 goroutine。由于新来的 goroutine 也参与竞争锁，极端情况下，等待中的 goroutine 可能一直获取不到锁，这就是饥饿问题。为了解决饥饿，Go为 mutex 增加了饥饿模式。在正常模式下，等待中的 goroutine 会按照先进先出的顺序获取锁。但是如果新来的 goroutine 竞争锁，等待中的 goroutine 大概率是获取不到锁的。一旦 goroutine 超 过 1ms 没有获取到锁，它就会将当前互斥锁切换到饥饿模式，保证锁的公平性。在饥饿模式中，互斥锁会直接交给等待队列最前面的 goroutine。新来的 goroutine 在该状态下不能获取锁、也不会进入自旋状态，只会在队列的末尾等待。下面两种情况，mutex 会切换为正常模式: 一个 goroutine 获得了锁并且它在队列的末尾 一个 goroutine 等待的时间少于 1ms Mutex.Lock() 的实现 自旋自旋是一种多线程同步机制，当前的进程在进入自旋的过程中会一直保持 CPU 的占用，持续检查某个条件是否为真。在多核的 CPU 上，自旋可以避免 goroutine 的切换， 使用恰当会对性能带来很大的增益，但是使用的不恰当就会拖慢整个程序，所以 goroutine 进入自旋的条件非常苛刻： old&amp;(mutexLocked|mutexStarving) == mutexLocked 只有在普通模式 runtime_canSpin(iter) 为真： 运行在多 CPU 的机器上 自旋的次数小于四次 当前机器上至少存在一个正在运行的处理器 P 并且处理的运行队列为空 Mutex.Unlock() 的实现 3.sync.RWMutex读写互斥锁 sync.RWMutex 是细粒度的互斥锁，一般来说有几种情况： 读锁之间不互斥 写锁之间是互斥的 写锁与读锁是互斥的sync.RWMutex 类型中的 Lock 方法和 Unlock 方法用于对写锁进行锁定和解锁，RLock 方法和 RUnlock 方法则分别用于对读锁进行锁定和解锁。 4.sync.WaitGroupsync.WaitGroup 可以等待一组 goroutine 的返回，常用于处理批量的并发任务。它是并发安全的。WaitGroup 提供了三个方法： Add：用来设置 WaitGroup 的计数值。 Done：用来将 WaitGroup 的计数值减 1，其实就是调用了 Add(-1)。 Wait：调用这个方法的 goroutine 会一直阻塞，直到 WaitGroup 的计数值变为 0。不要把 Add 和 Wait 方法的调用放在不同的 goroutine 中执行，以免 Add 还未执行，Wait 已经退出尽量不要重用 WaitGroup。新建一个 WaitGroup 不会带来多大的资源 开销，重用反而更容易出错。 noCopy 是 go 1.7 开始引入的一个静态检查机制，它只是一个辅助类型tools/go/analysis/passes/copylock 包中的分析器会在编译期间检查被拷贝的变量中是否包含 noCopy 或者实现了 Lock 和 Unlock 方法，如果包含该结构体或者实现了对应的方法就会报错 关于noCopynoCopy 类型以及相关的 Lock 和 Unlock 方法的设计主要是为了防止某些结构体被意外拷贝 以下是一些通常需要不可拷贝属性的类： 资源管理类：比如文件操作类，若允许拷贝，可能导致多个副本同时操作同一个文件，引发数据混乱或文件资源被滥用。再如数据库连接管理类，拷贝该类实例可能造成多个副本同时连接数据库，超出数据库连接池的限制，影响系统性能和稳定性。 状态管理类：像游戏中的角色状态类，每个角色的状态是唯一且独立的，若进行拷贝，可能导致角色状态混乱，影响游戏逻辑。还有 Web 应用中的用户会话管理类，每个用户的会话状态是特定的，拷贝会话管理类实例可能导致用户状态混淆，引发安全问题或错误的业务逻辑。 单例类：单例模式确保一个类只有一个实例存在于系统中。若允许拷贝单例类，就会破坏单例模式的唯一性，可能导致系统中出现多个不同状态的 “单例” 实例，引发逻辑错误和资源管理混乱。 并发控制类：例如使用互斥锁（Mutex）来控制并发访问的类，若可拷贝，可能会出现多个副本同时尝试获取锁，导致并发控制失效，引发数据竞争和不一致性问题。 内部有唯一标识或指针的类：当类内部包含唯一标识（如 UUID）或指针指向特定的内存区域、外部资源时，拷贝该类可能导致多个实例拥有相同的标识或指向相同的资源，进而引发冲突或资源管理错误。 静态分析代码：go vet 工具属于 Go 标准库的一部分，其工作原理是对代码进行静态分析，也就是在不运行代码的情况下分析代码的结构与语义。在使用 -copylocks 检查器时，go vet 会执行以下操作：1.解析代码go vet 会对代码进行解析，构建抽象语法树（AST）。抽象语法树是代码的一种树形表示，它能体现代码的语法结构。2.查找 noCopy 字段go vet 会遍历抽象语法树，查找包含 noCopy 类型字段的结构体。当发现这样的结构体时，它会记录下来。3.检查拷贝操作接着，go vet 会查找代码里对这些包含 noCopy 字段的结构体进行拷贝的操作。拷贝操作可能有以下几种情况：赋值，函数参数传递，函数返回值。4.发出警告一旦 go vet 发现对包含 noCopy 字段的结构体进行了拷贝操作，就会发出警告，提醒开发者可能存在的问题。 5.sync.Condsync.Cond 基于互斥锁&#x2F;读写锁和互斥锁的区别：互斥锁 sync.Mutex 通常用来保护临界区和共享资源，条件变量 sync.Cond 用来协调想要访问共享资源的 goroutine。sync.Cond 经常用在多个 goroutine 等待，一个 goroutine 通知的场景。NewCond 用来创建 sync.Cond 实例，sync.Cond 暴露了几个方法： Broadcast 用来唤醒所有等待条件变量的 goroutine，无需锁保护。 Signal 唤醒一个 goroutine。 Wait 调用 Wait 会自动释放锁，并挂起调用者所在的 goroutine，也就是当前 goroutine 会阻塞在 Wait 方法调用的地方。如果其他 goroutine 调用了 Signal 或 Broadcast 唤醒 了该 goroutine，那么 Wait 方法在结束阻塞时，会重新加锁，并且继续执行 Wait 后面的代码。 status：互斥锁需要保护的条件变量。 listen() 调用 Wait() 等待通知，直到 status 为 1。 broadcast() 将 status 置为 1，调用 Broadcast() 通知所有等待的 goroutine。 6.sync.OnceGo 标准库中 sync.Once 可以保证 Go 程序运行期间的某段代码只会执行一次。常常用于单例对象的初始化场景。sync.Once 只有一个对外唯一暴露的方法 Do，可以多次调用，但是只第一次调用时会执行一次。 运行： 7.Context主要的作用是在在一组 goroutine 之间传递共享的值、取消信号、deadline 等。context.Context并不是一个具体的实现，而是一个定义了一组方法的接口，Context接口共有四个方法。 Deadline — 返回当前 context 的截止时间。 Done — 返回一个只读的 channel，可用于识别当前 channel 是否已经被关闭，其原因可能是到期，也可能是被取消了。多次调用 Done 方法会返回同一个 channel。 Err — 返回当前 context 被关闭的原因。 如果 context 被取消，会返回 Canceled 错误。 如果 context 超时，会返回 DeadlineExceeded 错误。 Value — 返回当前 context 对应所存储的 context信息，可以用来传递请求特定的数据。创建 context： Background：创建一个空的 context，一般用在主函数、初始化、测试以及创建 root context 的时候。 TODO：创建一个空的 context，不知道要传递一些什么上下文信息的时候，就用这个。 WithCancel：基于 parent context 创建一个可以取消的新 context。 WithTimeout：基于 parent context 创建一个具有超时时间的新 context。 WithDeadline：和 WithTimeout 一样，只不过参数是截止时间（超时时间加上当前时间）。 WithValue：基于某个 context 创建并存储对应的上下文信息。 6.atomic包（原子操作）Go 的标准库 sync/atomic 提供了一些实现原子操作的方法： Add CompareAndSwap（简称 CAS） Load Swap Store互斥锁与原子操作区别： 互斥锁是用来保护临界区，原子操作用于对一个变量的更新保护。 互斥锁由操作系统的调度器实现，原子操作由底层硬件指令直接提供支持。使用互斥锁实现并发计数： 使用原子操作替换互斥锁： "},{"title":"计算机网络","date":"2024-11-14T15:00:00.000Z","url":"/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","categories":[["undefined",""]],"content":"先展示一下这个经典结构，然后用一个数据包的一生来逐一解释整个计算机网络 1.应用层解决的问题： 提供网络应用服务功能： 应用层直接面向用户，提供各种网络应用服务。它是用户与网络之间的接口，负责处理特定的应用程序协议（如HTTP、HTTPS、FTP、SMTP等），使用户能够通过网络进行通信。主要任务： 应用协议的实现：如HTTP（用于网页浏览）、FTP（用于文件传输）、SMTP（用于电子邮件）等。 数据格式的转换：将数据转换为应用程序能够理解的格式。 用户认证与授权：处理用户的身份验证和权限管理。 数据加密与解密：SSL&#x2F;TLS加密确保数据的安全性。 HTTP(Hypertext Transfer Protocol)超文本传输协议当我们打开一个网站时，会输入一个网址，这个网址就是urlurl代表了我们要向服务器请求的资源，对url进行解析后，确定了请求信息，接下来就可以遵循HTTP协议把这些信息封装成一个HTTP请求，而请求主要是GET请求，POST请求，还有PUT请求，DELETE请求等，但是最常用的就是GET，POST请求，一个POST请求由请求行，请求头，请求头三部分构成，而GET请求没有请求体。 &#x3D;&#x3D;下图就是一个POST请求的报文形式。&#x3D;&#x3D; 这样一个请求数据包就诞生了，接下来就需要为他指路，让他知道请求的是哪个服务器 DNS协议我们平时打开网页时都是输入的网址，例如:www.baidu.com 但是计算机是无法识别域名的，在计算机的网络中只有IP, MAC地址可以被解读，那么我们就要想办法将域名解析为服务器IP，这时候就用到了DNS解析。接下来讲解一下DNS解析的步骤。 第一步本地电脑会检查浏览器缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就结束。浏览器缓存域名也是有限制的，不仅浏览器缓存大小有限制，而且缓存的时间也有限制，通常情况下为几分钟到几小时不等，域名被缓存的时间限制可以通过TTL属性来设置。这个缓存时间太长和太短都不太好，如果时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有一部分用户无法访问网站。如果设置时间太短，会导致用户每次访问网站都要重新解析一次域名。 第二步如果浏览器缓存中没有数据，浏览器会查找操作系统缓存中是否有这个域名对应的DNS解析结果。 第三步前两个过程无法解析时，就要用到我们网络配置中的”DNS服务器地址”了。操作系统会把这个域名发送给这个本地DNS服务器。每个完整的内网通常都会配置本地DNS服务器。它们一般都会缓存域名解析结果，当然缓存时间是受到域名的失效时间控制的。大约80%的域名解析到这里就结束了，后续的DNS迭代和递归也是由本地DNS服务器负责。 第四步如果本地DNS服务器仍然没有命中，就直接到根DNS服务器请求解析。 第五步根DNS服务器返回给本地DNS域名服务器一个顶级DNS服务器地址，它是国际顶级域名服务器，如.com、.cn、.org等，全球只有13台左右。 第六步本地DNS服务器再向上一步获得的顶级DNS服务器发送解析请求。接受请求的顶级DNS服务器查找并返回此域名对应的Name Server域名服务器的地址，这个Name Server服务器就是我要访问的网站域名提供商的服务器，其实该域名的解析任务就是由域名提供商的服务器来完成。 比如我要访问 www.baidu.com， 而这个域名是从A公司注册获得的，那么A公司上的服务器就会有www.baidu.com的相关信息。 第七步Name Server服务器会查询存储的域名和IP的映射关系表，再把查询出来的域名和IP地址等等信息，连同一个TTL值返回给本地DNS服务器。本地DNS服务器会缓存这个域名和IP的对应关系，缓存时间由TTL值控制。 第八步把解析的结果返回给本地电脑，本地电脑根据TTL值缓存在本地系统缓存中，域名解析过程结束在实际的DNS解析过程中，可能还不止这10步，如Name Server可能有很多级，或者有一个GTM来负载均衡控制，这都有可能会影响域名解析过程 &#x3D;&#x3D;下图为一个DNS解析的流程&#x3D;&#x3D; 这样数据包就找到了自己的目的地了。而HTTP(HTTPS)协议和DNS协议就是在&#x3D;&#x3D;应用层&#x3D;&#x3D;上的协议 2.传输层解决的问题： 端到端的可靠传输功能： 传输层负责在源端和目的端之间提供可靠的、端到端的数据传输服务。它确保数据能够完整、正确地从发送方传输到接收方，并处理数据传输中的差错和流量控制。主要任务： 端口管理：通过端口号区分不同的应用程序（如HTTP使用端口80，HTTPS使用端口443）。 可靠传输：通过确认机制（如TCP的三次握手）确保数据包的可靠传输。 流量控制：防止发送方发送过多数据，导致接收方无法处理。 错误检测与恢复：通过重传机制确保丢失或损坏的数据包能够被重新发送。 数据分段与重组：将大数据分段传输，并在接收端重新组装。 TCP协议TCP连接TCP协议就是工作在传输层上的协议，TCP协议是面向连接的可靠协议，所以在发送数据之前要先与目标服务器进行TCP连接，就是经典的三次握手，三次握手目的是保证双方都有发送和接收的能力。&#x3D;&#x3D;下图前三次就是建立握手的过程&#x3D;&#x3D;&#x3D;&#x3D;下图是一个简单的TCP建立连接的模型&#x3D;&#x3D;接下来解读一下TCP头部 TCP头部字段首先，源端口号和目标端口号是不可少的，如果没有这两个端口号，数据就不知道应该发给哪个应用。接下来有包的序号，这个是为了解决包乱序的问题。还有应该有的是确认号，目的是确认发出去对方是否有收到。如果没有收到就应该重新发送，直到送达，这个是为了解决丢包的问题。接下来还有一些状态位。例如 SYN 是发起一个连接，ACK 是回复，RST 是重新连接，FIN 是结束连接等。TCP 是面向连接的，因而双方要维护连接的状态，这些带状态位的包的发送，会引起双方的状态变更。还有一个重要的就是窗口大小。TCP 要做流量控制，通信双方各声明一个窗口（缓存大小），作用是为了解决发送方和接收方速度不同而导致的数据丢失问题,当发送方发送的太快,接收方来不及接受就会导致数据丢失。除了做流量控制以外，TCP还会做拥塞控制，为了解决过多的数据注入到网络导致网络崩溃和超负荷问题。接下来讲解一下流量控制和拥塞控制流量控制发送端会根据自己的实际情况发送数据，但因为接收端接收不过来的话，接收方只能把处理不过来的数据存在缓存区里。如果缓存区都满了对方还在疯狂发送数据，接收方只能把收到的数据包丢掉，这就造成了网络资源的浪费！典型的场景如以太网场景中10G设备向1G设备发TCP包。为了防止这种现象的发生，TCP 提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量。这就是所谓的流量控制。它的具体操作是：（1）接收端主机向发送端主机通知自已可以接收数据的大小；（2）于是发送端会发送不超过这个限度的数据，该大小限度就被称作窗口大小。窗口大小的值由接收端主机决定，而在TCP 首部中，就有一个字段用来通知窗口大小（3）接收主机将自己可以接收的缓冲区大小放入这个字段中通知给发送端，这个字段的值越大，说明网络的吞吐量越高。不过，接收端的这个缓冲区一旦面临数据溢出时，窗口大小的值也会随之被设置为一个更小的值通知给发送端，从而控制数据发送量。也就是说，发送端主机会根据接收端主机的指示，对发送数据的量进行控制。这也就形成了一个完整的TCP流控制(流量控制)。当Window&#x3D;0时，即告知发送方停止发送数据。拥塞控制先了解两个概念：拥塞窗口（cwnd）：发送方维持的一个状态变量，其大小取决于网络的拥塞程度，并且动态变化。慢开始门限（ssthresh）：为了防止拥塞窗口cwnd的增长过大引起网络拥塞所设置的一个门限值。通过四种算法实现拥塞管理：1.慢开始2.拥塞避免3.超时重传（1988年TCP Tahoe版本，已废弃不用）4.快重传（1990年Reno版本，在用）5.快恢复（1990年Reno版本，在用）也就是说发送方会动态判定网络状态并按照上述算法调整TCP的发包节奏，那么如何确认使用算法呢？如下：当cwnd &lt; ssthresh时，使用慢开始算法；当cwnd &gt; ssthresh时，停止使用慢开始算法而改用拥塞避免算法；当cwnd &#x3D; ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。 慢开始发送方先探测网络拥塞程度，并不是一开始就发送大量的数据，发送方会根据拥塞程度增大拥塞窗口cwnd。计算方法：每经过一个传输轮次cwnd值就加倍，让cwnd值呈指数增加。如上图，大体过程：1.当前发送方cwnd值为1，因此只能发送一个数据报文段（拥塞窗口cwnd值是几就能发送几个数据段）2.接收方收到该数据报文段后回复一个确认报文段，发送方收到该确认报文后，将cwnd值变为2(加倍)；3.发送方此时可以连续发送两个数据段，接收方收到该数据段后一次发回2个确认报文段；4.发送方收到这两个确认报文后，将cwnd值加2变为4（加倍）后可以连续发送4个数据段，以此类推直至cwnd&#x3D;ssthresh。 拥塞避免继上图达到cwnd≥ssthresh后采用该算法用来控制拥塞窗口的增长速率。计算方法：每经过一个传输轮次cwnd值加1，让cwnd值呈线性缓慢增大。 拥塞发生当网络发生拥塞丢包时（如图假定cwnd&#x3D;24）● 快重传和快恢复（1990年TCP Reno版本，在用）超时重传算法直接把cwnd减小到1太过强烈，若还能收到连续3个ACK说明网络质量没那么差。同时采用快重传和快恢复算法，过程如下： （1）当发送方连续收到3个重复确认时即执行“乘法减小”算法，把慢开始门限ssthresh 减半；（2）由于发送方现在认为网络不那么差，于是把cwnd值设置为开始门限ssthresh 减半后的数值；（3）开始执行拥塞避免算法 (“加法增大”)使拥塞窗口缓慢地线性增大。这样就解释完了TCP协议的所有字段。 TCP 分割数据如果 HTTP 请求消息比较长，超过了 MSS 的长度，这时 TCP 就需要把 HTTP 的数据拆解成一块块的数据发送，而不是一次性发送所有数据。MTU：一个网络包的最大长度，以太网中一般为 1500 字节。MSS：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。 TCP报文组装将TCP报文和之前的HTTP报文组装在一起，TCP协议就完成了他的任务了。 3.网络层解决的问题： 跨网络的路由与寻址功能： 网络层负责在不同网络之间传输数据包，并选择最佳路径将数据从源节点传输到目标节点。它处理逻辑地址（如IP地址）和路由选择问题。主要任务： IP地址的分配与管理：为每个设备分配唯一的IP地址。 路由选择：根据路由表和路由协议，选择数据包从源到目的地的最佳路径。 数据包的转发：通过路由器将数据包从一个网络转发到另一个网络。 分组与重组：如果数据包过大，网络层可以将其分割成更小的包，并在接收端重新组装。 IP协议IP协议是工作在网络层的协议，为了让数据包知道他应该发送到哪里。我们先看看 IP 报文头部的格式：在 IP 协议里面需要有源地址 IP 和 目标地址 IP：源地址IP，即是客户端的 IP 地址。目标地址，即通过 DNS 域名解析得到的 Web 服务器 IP。其中的协议就是传输层所用的协议(TCP，UDP等) 数据链路层解决的问题： 可靠的数据帧传输功能： 数据链路层负责在相邻节点之间可靠地传输数据帧，并处理物理层可能出现的错误。它将物理层的比特流组织成帧，并确保这些帧能够在同一局域网内正确传输。主要任务： 帧的封装和解封装：将数据封装成帧，添加头部和尾部（包括MAC地址等信息）。 错误检测与纠正：通过校验和等机制检测传输错误。 流量控制：防止发送方发送过多数据，导致接收方处理不过来。 介质访问控制（MAC）：控制设备如何在共享的传输介质上访问网络（如以太网中的CSMA&#x2F;CD机制）。 MAC地址与ARP协议数据链路层最基本的服务是将源计算机网络层来的数据可靠的传输到相邻节点的目标计算机的网络层。为达到这一目的，数据链路层必须具备一系列相应的功能，主要有：如何将数据组合成数据块（在数据链路层中将这种数据块称为帧，帧是数据链路层的传送单位）；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使之与接收方相匹配；在两个网路实体之间提供数据链路通路的建立、维持和释放管理。而相邻节点之间的传输要依靠MAC地址进行，网络包还需要在 IP 头部的前面加上 MAC 头部。MAC 头部是以太网使用的头部，它包含了接收方和发送方的 MAC 地址等信息。在以太网环境中，数据的传输所依懒的是MAC地址而非IP地址，而将已知IP地址转换为MAC地址的工作是由ARP协议来完成的。首先当数据要离开当前以太网时，主机要将数据发送到对应路由上，数据如果是第一次发送，并且主机不知道路由器的MAC地址，那么主机首先会发送一个ARP（Address Resolution Protocol）请求。这个ARP请求是一个广播帧，它包含以下信息： 源MAC地址：发送ARP请求的主机的MAC地址。 源IP地址：发送ARP请求的主机的IP地址。 目标MAC地址：全F的广播地址（例如，FF:FF:FF:FF:FF:FF）。 目标IP地址：路由器的IP地址。 在这个广播帧中，主机使用自己的IP地址和MAC地址，并且询问“拥有这个IP地址的主机的MAC地址是什么？”这样的询问是以广播的形式发送到整个局域网中，目的是为了找到与目标IP地址相对应的MAC地址。 因此，第一次发送广播时，主机实际上是在询问目标IP地址对应的MAC地址，而不是直接发送IP数据包。一旦路由器响应了ARP请求，主机就会得到路由器的MAC地址，并使用这个MAC地址来封装后续的数据包，然后发送给路由器。后续的数据包将包含以下信息： 源MAC地址：主机的MAC地址。 目标MAC地址：路由器的MAC地址。 源IP地址：主机的IP地址。 目标IP地址：最终目的地的IP地址（可能是另一个网络上的主机或者互联网上的服务器）。 所以第一次发送广播时，主机是使用自己的IP地址来查询路由器的MAC地址，这个查询是通过ARP请求完成的，而不是直接发送IP数据包。但是那岂不是每次发送数据都要先发一个去询问，这样太麻烦了，所以在后续操作系统会把本次查询结果放到一块叫做 ARP 缓存的内存空间留着以后用，不过缓存的时间就几分钟。也就是说，在发包时：先查询 ARP 缓存，如果其中已经保存了对方的 MAC 地址，就不需要发送 ARP 查询，直接使用 ARP 缓存中的地址。而当 ARP 缓存中不存在对方 MAC 地址时，则发送 ARP 广播查询。缓存也有自己的时间，而且一直将缓存存在本机会浪费内存资源，所以我们需要用到交换机。封装之后数据包变成了下面这个样子 交换机交换机会根据数据帧中的MAC地址，通过查询交换机内部维护的MAC地址表，将数据帧从源设备转发到目的设备。当发送一次之后，交换机就会记住IP与MAC的对应关系，方便后续的查找。 路由器路由器的基本功能是在不同的网络之间转发数据包。当一个数据包到达路由器时，路由器会根据数据包的目的IP地址，通过内部的路由表，路由器根据路由算法和路由协议来选择数据包转发的最佳路径，决定最佳的转发路径，并将数据包发送到下一个网络或目的地。下图是查询路由表决定转发路径路由器可以实现网络地址转换，允许私有网络中的设备使用内部IP地址访问外部网络（如互联网），同时对外隐藏内部网络的结构，这就是所谓的内网穿透。现代路由器基本上都包含了交换机，所以家庭中有一台路由器就可以连接外网，去互联网冲浪，不需要额外的交换机。最后整体封装流程如下 尾声整体流程大致如上，对于计算机网络来说，我真的没写多少东西，全写完太累了，还有很多细节问题需要你们自己探索，例如交换机与路由器分别工作在哪一层，HTTPS的加密方式，如何实现内网穿透，HTTP与RPC调用等等有趣的问题。计算机的世界是探索不完的，我感觉已经要似掉了wwww。"},{"title":"树","date":"2024-11-09T08:00:00.000Z","url":"/2024/11/09/%E6%A0%91/","categories":[["undefined",""]],"content":"树1、树的基本概念1.树的定义 树是n（n&gt;&#x3D;0）个结点的有限集。当n &#x3D; 0时，称为空树。在任意一棵非空树中应满足：有且仅有一个特定的称为根的结点。 当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集T1,T2,…,Tm，其中每个集合本身又是一棵树，并且称为根的子树。 显然，树的定义是递归的，即在树的定义中又用到了自身，树是一种递归的数据结构。树作为一种逻辑结构，同时也是一种分层结构，具有以下两个特点： 1.树的根结点没有前驱，除根结点外的所有结点有且只有一个前驱。 2.树中所有结点可以有零个或多个后继。因此n个结点的树中有n-1条边。 2.树的基本术语 1.节点：存储数据的单元，可以是任何类型的值。 2.节点的度：该节点直接相连的边的数量。 3.根节点：仅有一个根节点，没有父节点，是树的起点。 4.子树：根节点之外的任意节点都可以作为子树的根，形成独立的树。 5.叶子节点：没有子节点的节点称为叶节点。 6.孩子结点或子结点：结点的子树的根称为该结点的孩子结点或子结点。 7.双亲结点或父结点：若一个结点含有子结点，则这个结点称为其子结点的双亲结点或父结点。 8.兄弟结点：同一个双亲的孩子之间互称兄弟。 9.树的深度或高度：树中结点的最大层次。 3.树状结构的应用 文件系统 最为基础的应用就是计算机中对文件的管理结构，在计算机的文件系统中，目录和文件以树形结构组织。这种结构不仅便于用户和管理员快速定位、访问和管理文件，还能有效利用存储空间。 数据库索引 数据库系统利用树形结构（如B树、B+树）来构建索引，以加快数据检索的速度。B树和B+树是平衡多路搜索树，它们通过减少磁盘I&#x2F;O操作来提高查询效率。在B树中，每个节点包含多个关键字和子节点指针，所有叶子节点都在同一层。B+树则进一步优化了B树的结构，所有关键字都出现在叶子节点中，并且叶子节点之间通过指针相连，形成了有序链表，这使得范围查询更加高效。 人工智能 在人工智能领域，树形结构的应用非常广泛。决策树是一种常用的分类和回归方法，它通过构建一棵树来模拟人类决策过程。决策树的每个节点代表一个决策点，每个分支代表一个可能的决策结果，叶子节点则包含最终的决策输出。随机森林则是由多个决策树组成的集成学习方法，通过多个决策树的投票或平均来提高预测的准确性和鲁棒性。 2.二叉树1.二叉树的基本概念 二叉树是一种重要的数据结构，它是由节点组成的，每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树可以为空，也可以只有一个根节点，或者有一个根节点和两个子节点。二叉树的特点是每个节点最多只能有两个子节点，这两个子节点被称为左子树和右子树 2.遍历二叉树 二叉树是一种非常重要的数据结构，很多其它数据结构都是基于二叉树的基础演变而来的。对于二叉树，有深度遍历和广度遍历，深度遍历有前序、中序以及后序三种遍历方法，广度遍历即我们平常所说的层次遍历。 四种主要的遍历思想为： 前序遍历：根结点 —&gt; 左子树 —&gt; 右子树 中序遍历：左子树—&gt; 根结点 —&gt; 右子树 后序遍历：左子树 —&gt; 右子树 —&gt; 根结点 层次遍历：只需按层次遍历即可 前序遍历结果为：A B D E C F G 中序遍历结果为：D B E A F C G 后序遍历结果为：D E B F G C A 层序遍历结果为：A B C D E F G 前序遍历结果为：A B D F G H I E C 中序遍历结果为：F D H G I B E A C 后序遍历结果为：F H I G D E B C A 前序遍历结果为：A B D G H I C E J F 中序遍历结果为：G D I H B A E J C F 后序遍历结果为：G I H D B J E F C A 3.二叉搜索树1.基本概念 二叉搜索树（BST，Binary Search Tree），也称二叉排序树或二叉查找树。二叉搜索树：一棵二叉树，可以为空；如果不为空，满足以下性质： 非空左子树的所有键值小于其根结点的键值。 非空右子树的所有键值大于其根结点的键值。 左、右子树都是二叉搜索树。 2.代码以及遍历搜索 二叉树代码 [lang:C++] [title] [url] [link text] 3.二叉搜索树的问题 二叉查找树比普通树查找更快，查找、插入、删除的时间复杂度为O（logN）。但是二叉查找树有一种极端的情况，就是会变成一种线性链表似的结构。此时时间复杂度就变成了O（N），为了解决这种情况，出现了二叉平衡树 4.平衡二叉树1.基本概念 平衡二叉树也叫AVL树，它或者是一颗空树，或者具有以下性质的二叉排序树：它的左子树和左子树的高度之差(平衡因子)的绝对值不超过1，且它的左子树和右子树都是一颗平衡二叉树。所以由于要维持自身的平衡，所以进行插入和删除结点操作的时候，需要对结点进行频繁的旋转。 2.平衡因子 BF（平衡因子）的值为：左子树高度 - 右子树高度 3.平衡方法 当我们在一个平衡二叉树中进行插入和删除操作时，可能会导致它的平衡性被破坏。如上图，本是平衡的，如果我插入了一个新值是30的节点，那么这棵树的平衡性就会被破坏，它一共破坏了节点32和节点25的平衡性，虽然破坏了2个节点的平衡性，但我们只讨论最近被破坏节点的平衡性（因为底下的处理好了，上面的节点平衡性也会随之处理好），即新插入节点30破坏了节点32的平衡性，因为新插入节点而导致平衡性被破坏的节点也叫麻烦节点，而被其破坏平衡的节点叫被破坏节点。一共把破坏平衡型的类型分为了四种，分别是LL型、RR型、LR型和RL型，每一种破坏方式都有对应的旋转方式来保持树的平衡性。 1.LL型 如上两图图，LL型也为左左型，在被破坏节点的左边的左边插入而导致失衡，则为LL型。 LL型解决方案：以被破坏节点为基础进行右旋。右旋就是根据某个节点向右旋转。 2.RR型 如上两图图，RR型也为右右型，在被破坏节点的右边的右边插入而导致失衡，则为RR型。 RR型解决方案：以被破坏节点为基础进行左旋。左旋就是根据某个节点向左旋转。 3.LR型 如上图，LR型也为左右型，在被破坏节点的左边的右边插入而导致失衡，则为LR型。 LR型解决方案：以被破坏节点L（左）节点为基础先进行一次L（左）旋，再以被破坏节点为基础进行右旋。 先以20为基础进行一次左旋。再以25为基础进行一次右旋，可以看出经过两次旋转后，该树已经平衡。 4.RL型 如上图，RL型也为右左型，在被破坏节点的右边的左边插入而导致失衡，则为RL型。 RL型解决方案：以被破坏节点R（右）节点为基础先进行一次R（右）旋，再以被破坏节点为基础进行左旋。 先以25为基础进行一次右旋。再以20为基础进行一次右旋，可以看出经过两次旋转后，该树已经平衡。 5.总结 处理方式分为两大类： RR型和LL型，以被破坏节点为基础进行其反向的旋转即可，即RR型进行左旋，LL型进行右旋。 RL型和LR型，先以被破坏节点的LR或RL首字母的节点进行LR或RL首字母旋转，再以被破坏节点为基础进行LR或RL尾字母旋转，即RL型先以被破坏节点的R（右）节点为基础进行一次R（右）选，再以被破坏节点为基础进行一次L（左）旋；LR旋先以被破坏节点的L（左）节点为基础进行一次L（左）选，再以被破坏节点为基础进行一次R（右）旋。 4.代码实现 平衡二叉树代码 [lang:C++] [title] [url] [link text] 5.B树1.概述 B树也称B-树,它是一颗多路平衡查找树。我们描述一颗B树时需要指定它的阶数，阶数表示了一个结点最多有多少个孩子结点，一般用字母m表示阶数。当m取2时，就是我们常见的二叉搜索树。 2.特点 多路平衡树：多路平衡树其实就是多叉平衡树，每个节点都有多个指向孩子节点的指针以及键值。通常，一颗m阶的B树有k个子节点，有k-1个关键字，而k的取值范围为[ceil(m&#x2F;2),m]（celi表示向上取整）。例如一颗3阶的B树，最多有3个孩子2个关键字。 键值有序：每个节点中包含多个关键字，这些关键字是有序的。节点中每个关键字都将子节点切割成两部分，左边部分的节点的所有关键字的值一定是小于该关键字的，右边节点的所有关键字的值都是大于该关键字的，这一点跟二叉搜索树的性质相同。 树的高度平衡：所有叶子节点的深度都是一样的，站在AVL树的角度讲，每个节点的平衡因子都是0。 高效的磁盘读写：B树被设计用于在磁盘上高效的存储和读取数据。通过每个节点都有多个键值和多个字节的指针，从而减少磁盘的读写次数，以提高读写效率。 3.定义 一颗m阶的B树定义如下： 1）每个结点最多有m-1个key。 2）根结点最少可以只有1个key。 3）非根结点至少有Math.ceil(m&#x2F;2)-1个key。 4）每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。 5）所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度都相同。 上图是一颗阶数为4的B树。在实际应用中的B树的阶数m都非常大（通常大于100），所以即使存储大量的数据，B树的高度仍然比较小。每个结点中存储了关键字（key）和关键字对应的数据（data），以及孩子结点的指针。我们将一个key和其对应的data称为一个记录。在数据库中我们将B树（和B+树）作为索引结构，可以加快查询速度，此时B树中的key就表示键，而data表示了这个键对应的条目在硬盘上的逻辑地址。 4.插入操作 插入操作是指插入一条记录，即（key, value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key,则一定是在叶子结点中进行插入操作。 1）根据要插入的key的值，找到叶子结点并插入。 2）判断当前结点key的个数是否小于等于m-1，若满足则结束，否则进行第3步。 3）以结点中间的key为中心分裂成左右两部分，然后将这个中间的key插入到父结点中，这个key的左子树指向分裂后的左半部分，这个key的右子支指向分裂后的右半部分，然后将当前结点指向父结点，继续进行第3步。 a）在空树中插入39 此时根结点就一个key，此时根结点也是叶子结点 b）继续插入22，97和41 根结点此时有4个key c）继续插入53 插入后超过了最大允许的关键字个数4，所以以key值为41为中心进行分裂，结果如下图所示，分裂后当前结点指针指向父结点，满足B树条件，插入操作结束。当阶数m为偶数时，需要分裂时就不存在排序恰好在中间的key，那么我们选择中间位置的前一个key或中间位置的后一个key为中心进行分裂即可。 d）依次插入13，21，40，同样会造成分裂，结果如下图所示。 e）依次插入30，27, 33 ；36，35，34 ；24，29，结果如下图所示。 f）插入key值为26的记录，插入后的结果如下图所示。 当前结点需要以27为中心分裂，并向父结点进位27，然后当前结点指向父结点，结果如下图所示。 进位后导致当前结点（即根结点）也需要分裂，分裂的结果如下图所示。 分裂后当前结点指向新的根，此时无需调整。 g）最后再依次插入key为17,28,29,31,32的记录，结果如下图所示。 5.删除操作 删除操作是指，根据key删除记录，如果B树中的记录中不存对应key的记录，则删除失败。 1）如果当前需要删除的key位于非叶子结点上，则用后继key（这里的后继key均指后继记录的意思）覆盖要删除的key，然后在后继key所在的子支中删除该后继key。此时后继key一定位于叶子结点上，这个过程和二叉搜索树删除结点的方式类似。删除这个记录后执行第2步 2）该结点key个数大于等于Math.ceil(m&#x2F;2)-1，结束删除操作，否则执行第3步。 3）如果兄弟结点key个数大于Math.ceil(m&#x2F;2)-1，则父结点中的key下移到该结点，兄弟结点中的一个key上移，删除操作结束。 否则，将父结点中的key下移与当前结点及它的兄弟结点中的key合并，形成一个新的结点。原父结点中的key的两个孩子指针就变成了一个孩子指针，指向这个新结点。然后当前结点的指针指向父结点，重复上第2步。 有些结点它可能即有左兄弟，又有右兄弟，那么我们任意选择一个兄弟结点进行操作即可。 下面以5阶B树为例，介绍B树的删除操作，5阶B树中，结点最多有4个key,最少有2个key a）原始状态 b）在上面的B树中删除21，删除后结点中的关键字个数仍然大于等2，所以删除结束。 c）在上述情况下接着删除27。从上图可知27位于非叶子结点中，所以用27的后继替换它。从图中可以看出，27的后继为28，我们用28替换27，然后在28（原27）的右孩子结点中删除28。删除后的结果如下图所示。 删除后发现，当前叶子结点的记录的个数小于2，而它的兄弟结点中有3个记录（当前结点还有一个右兄弟，选择右兄弟就会出现合并结点的情况，不论选哪一个都行，只是最后B树的形态会不一样而已），我们可以从兄弟结点中借取一个key。所以父结点中的28下移，兄弟结点中的26上移,删除结束。结果如下图所示。 d）在上述情况下接着32，结果如下图。 当删除后，当前结点中只key，而兄弟结点中也仅有2个key。所以只能让父结点中的30下移和这个两个孩子结点中的key合并，成为一个新的结点，当前结点的指针指向父结点。结果如下图所示。 当前结点key的个数满足条件，故删除结束。 e）上述情况下，我们接着删除key为40的记录，删除后结果如下图所示。 同理，当前结点的记录数小于2，兄弟结点中没有多余key，所以父结点中的key下移，和兄弟（这里我们选择左兄弟，选择右兄弟也可以）结点合并，合并后的指向当前结点的指针就指向了父结点。 同理，对于当前结点而言只能继续合并了，最后结果如下所示。 合并后结点当前结点满足条件，删除结束。 6.查找操作 以查找6为例子： B树的查找包括两个基本操作： ① 在B树中找结点 ② 在结点中找关键字。 更具体的说，根据指针拿到一个结点，是一次磁盘I&#x2F;O，即第①个动作是在磁盘上进行的；根据有序关键字查找目标，是一次顺序查找或二分查找，即第②个动作是在内存中进行的。 这时，你是不是已经明白了为什么数据库要使用B树而非二叉搜索树呢？ B树和二叉查找树的目的都是查找，查找算法的瓶颈是什么呢？比较的次数。但是，数据库查询的瓶颈是什么呢？磁盘I&#x2F;O的次数。在内存中比较的时间，在磁盘I&#x2F;O的时间面前完全可以忽略。况且，B-Tree和BST在比较次数上其实相差无几。 把B-Tree和BST摆在一起不难看出，B-Tree比BST矮胖的多。高度更小，说明磁盘I&#x2F;O次数越少，自然性能越好！当数据库非常非常非常大时，B树的一个结点就是放在一个磁盘块上的，对于磁盘I&#x2F;O次数的节省也会到达极致。 6.B+树1.特点B+ 树与 B 树差异的点，主要是以下这几点： 叶子节点（最底部的节点）才会存放实际数据（索引+记录），非叶子节点只会存放索引。 所有索引都会在叶子节点出现，叶子节点之间构成一个有序链表。 非叶子节点的索引也会同时存在在子节点中，并且是在子节点中所有索引的最大（或最小）。 非叶子节点中有多少个子节点，就有多少个索引。2.在存储上的优势MySQL数据库里的InnoDB存储引擎就是使用B+树进行数据存储的。下面通过三个方面，比较下 B+ 和 B 树的性能区别。1、单点查询B 树进行单个索引查询时，最快可以在 O(1) 的时间代价内就查到，而从平均时间代价来看，会比 B+ 树稍快一些。但是 B 树的查询波动会比较大，因为每个节点即存索引又存记录，所以有时候访问到了非叶子节点就可以找到索引，而有时需要访问到叶子节点才能找到索引。B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I&#x2F;O次数会更少。2、插入和删除效率B+ 树有大量的冗余节点，这样使得删除一个节点的时候，可以直接从叶子节点中删除，甚至可以不动非叶子节点，这样删除非常快。B 树则不同，B 树没有冗余节点，删除节点的时候非常复杂，比如删除根节点中的数据，可能涉及复杂的树的变形，比如下面这个动图是删除 B 树根节点的过程：3、范围查询B 树和 B+ 树等值查询原理基本一致，先从根节点查找，然后对比目标数据的范围，最后递归的进入子节点查找。因为 B+ 树所有叶子节点间还有一个链表进行连接，这种设计对范围查找非常有帮助，比如说我们想知道 12 月 1 日和 12 月 12 日之间的订单，这个时候可以先查找到 12 月 1 日所在的叶子节点，然后利用链表向右遍历，直到找到 12 月12 日的节点，这样就不需要从根节点查询了，进一步节省查询需要的时间。而 B 树没有将所有叶子节点用链表串联起来的结构，因此只能通过树的遍历来完成范围查询，这会涉及多个节点的磁盘 I&#x2F;O 操作，范围查询效率不如 B+ 树。因此，存在大量范围检索的场景，适合使用 B+树，比如数据库。而对于大量的单个索引查询的场景，可以考虑 B 树，比如 nosql 的MongoDB。 7.总结二分查找树虽然是一个天然的二分结构，能很好的利用二分查找快速定位数据，但是它存在一种极端的情况，每当插入的元素都是树内最大的元素，就会导致二分查找树退化成一个链表，此时查询复杂度就会从 O(logn)降低为 O(n)。为了解决二分查找树退化成链表的问题，就出现了平衡二叉树，保证了查询操作的时间复杂度就会一直维持在 O(logn) 。但是它本质上还是一个二叉树，每个节点只能有 2 个子节点，随着元素的增多，树的高度会越来越高。而树的高度决定于磁盘 I&#x2F;O 操作的次数，因为树是存储在磁盘中的，访问每个节点，都对应一次磁盘 I&#x2F;O 操作，也就是说树的高度就等于每次查询数据时磁盘 IO 操作的次数，所以树的高度越高，就会影响查询性能。B 树和 B+ 都是通过多叉树的方式，会将树的高度变矮，所以这两个数据结构非常适合检索存于磁盘中的数据。但是 MySQL 默认的存储引擎 InnoDB 采用的是 B+ 作为索引的数据结构。原因有： B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I&#x2F;O次数会更少。 B+ 树有大量的冗余节点（所有非叶子节点都是冗余索引），这些冗余索引让 B+ 树在插入、删除的效率都更高，比如删除根节点的时候，不会像 B 树那样会发生复杂的树的变化。 B+ 树叶子节点之间用链表连接了起来，有利于范围查询，而 B 树要实现范围查询，因此只能通过树的遍历来完成范围查询，这会涉及多个节点的磁盘 I&#x2F;O 操作，范围查询效率不如 B+ 树。 "},{"title":"我的第一篇文章","date":"2024-11-08T13:46:03.000Z","url":"/2024/11/08/post/","categories":[["undefined",""]],"content":"hello world"},{"title":"about","date":"2024-11-08T13:35:08.000Z","url":"/about/index.html","categories":[["undefined",""]],"content":"简介一只大学生，了解Java，Golang，Kotlin，会一点后端，但是现在想成为安卓高手！！"}]