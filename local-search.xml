<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每日搓安卓组件</title>
    <link href="/2025/05/18/%E6%AF%8F%E6%97%A5%E6%90%93%E5%AE%89%E5%8D%93%E7%BB%84%E4%BB%B6/"/>
    <url>/2025/05/18/%E6%AF%8F%E6%97%A5%E6%90%93%E5%AE%89%E5%8D%93%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>本人跟着安卓开发者手册学下来，又自己找了一个项目跟着做，发现想在项目中融入自己的小idea这个过程并不是很顺利，去搜资料发现网上安卓相关资料并不多，问ai，ai有时也和我胡言乱语，所以为了记录学习安卓的各种问题，也算是为网上稀少的安卓开发相关资料贡献一份自己的力量，这篇博客就是展示一些自己做的小组件，我可能还会讲讲当时折磨我好久的原因是什么，希望避坑吧。</p><h1 id="一-搜索组件"><a href="#一-搜索组件" class="headerlink" title="一. 搜索组件"></a>一. 搜索组件</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span>  <br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">CustomEditSearch</span><span class="hljs-params">(  </span></span><br><span class="hljs-params"><span class="hljs-function">    text: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;&quot;</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function">    onValueChange: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function">    modifier: <span class="hljs-type">Modifier</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function">    hint: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;请输入&quot;</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@DrawableRes</span> startIcon: <span class="hljs-type">Int</span> = <span class="hljs-number">-1</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function">    iconSpacing: <span class="hljs-type">Dp</span> = <span class="hljs-number">6.</span>dp,  </span></span><br><span class="hljs-params"><span class="hljs-function">    enabled: <span class="hljs-type">Boolean</span> = <span class="hljs-literal">true</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function">    readOnly: <span class="hljs-type">Boolean</span> = <span class="hljs-literal">false</span>,  </span></span><br><span class="hljs-params"><span class="hljs-function">    textStyle: <span class="hljs-type">TextStyle</span> = TextStyle.Default,  </span></span><br><span class="hljs-params"><span class="hljs-function">    keyboardOptions: <span class="hljs-type">KeyboardOptions</span> = KeyboardOptions.Default,  </span></span><br><span class="hljs-params"><span class="hljs-function">    keyboardActions: <span class="hljs-type">KeyboardActions</span> = KeyboardActions.Default,  </span></span><br><span class="hljs-params"><span class="hljs-function">    visualTransformation: <span class="hljs-type">VisualTransformation</span> = VisualTransformation.None,  </span></span><br><span class="hljs-params"><span class="hljs-function">    cursorBrush: <span class="hljs-type">Brush</span> = SolidColor(MaterialTheme.colorScheme.primary)</span></span>  <br>) &#123;  <br>    <span class="hljs-comment">// 焦点, 用于控制是否显示 右侧叉号  </span><br>    <span class="hljs-keyword">var</span> hasFocus <span class="hljs-keyword">by</span> remember &#123; mutableStateOf(<span class="hljs-literal">false</span>) &#125;  <br>  <br>    BasicTextField(  <br>        value = text,  <br>        onValueChange = onValueChange,  <br>        modifier = modifier.onFocusChanged &#123; hasFocus = it.isFocused &#125;,  <br>        singleLine = <span class="hljs-literal">true</span>,  <br>        enabled = enabled,  <br>        readOnly = readOnly,  <br>        textStyle = textStyle,  <br>        keyboardOptions = keyboardOptions,  <br>        keyboardActions = keyboardActions,  <br>        visualTransformation = visualTransformation,  <br>        cursorBrush = cursorBrush,  <br>        decorationBox = <span class="hljs-meta">@Composable</span> &#123; innerTextField -&gt;  <br>            Row(  <br>                modifier = Modifier.fillMaxWidth(),  <br>                verticalAlignment = Alignment.CenterVertically  <br>            ) &#123;  <br>                <span class="hljs-comment">// -1 不显示 左侧Icon  </span><br>                <span class="hljs-keyword">if</span> (startIcon != -<span class="hljs-number">1</span>) &#123;  <br>                    Image(painter = painterResource(id = startIcon), contentDescription = <span class="hljs-literal">null</span>)  <br>                    Spacer(modifier = Modifier.width(iconSpacing))  <br>                &#125;  <br>  <br>                Box(modifier = Modifier.weight(<span class="hljs-number">1f</span>)) &#123;  <br>                    <span class="hljs-comment">// 当空字符时, 显示hint  </span><br>                    <span class="hljs-keyword">if</span> (text.isEmpty())  <br>                        Text(text = hint, color = Color.Gray, style = textStyle)  <br>  <br>                    <span class="hljs-comment">// 原本输入框的内容  </span><br>                    innerTextField()  <br>                &#125;  <br>  <br>                <span class="hljs-comment">// 存在焦点 且 有输入内容时. 显示叉号  </span><br>                <span class="hljs-keyword">if</span> (hasFocus &amp;&amp; text.isNotEmpty()) &#123;  <br>                    Icon(imageVector = Icons.Filled.Clear, <span class="hljs-comment">// 清除图标  </span><br>                        contentDescription = <span class="hljs-literal">null</span>,  <br>                        <span class="hljs-comment">// 点击就清空text  </span><br>                        modifier = Modifier.clickable &#123; onValueChange.invoke(<span class="hljs-string">&quot;&quot;</span>) &#125;)  <br>                &#125;  <br>                Icon(  <br>                    imageVector = Icons.Filled.Search,  <br>                    contentDescription = <span class="hljs-literal">null</span>,  <br>                    modifier = Modifier  <br>                        .padding(start = <span class="hljs-number">10.</span>dp)  <br>                )  <br>            &#125;  <br>        &#125;    )  <br>&#125;<br></code></pre></td></tr></table></figure><p>使用BasicTextField定制化程度更高，我最开始一直在TextField的基础上稿，弄出的东西就很难看。</p><h1 id="二-轮播图组件"><a href="#二-轮播图组件" class="headerlink" title="二. 轮播图组件"></a>二. 轮播图组件</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span>  <br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">SwiperContent</span><span class="hljs-params">(vm: <span class="hljs-type">MainViewModel</span> = viewModel()</span></span>)&#123;  <br>  <br>    <span class="hljs-keyword">val</span> realPageCount = vm.swiperData.size  <br>    <span class="hljs-keyword">val</span> initialPage = <span class="hljs-number">1000</span> * realPageCount <span class="hljs-comment">// 从一个较大的页面开始，营造无限滚动的感觉  </span><br>    <span class="hljs-keyword">var</span> isPlaying <span class="hljs-keyword">by</span> remember &#123; mutableStateOf(<span class="hljs-literal">true</span>) &#125;  <br>  <br>    <span class="hljs-keyword">val</span> pagerState = rememberPagerState(initialPage = initialPage) &#123;  <br>        <span class="hljs-built_in">Int</span>.MAX_VALUE <span class="hljs-comment">// 几乎无限的页面  </span><br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> (realPageCount &lt;= <span class="hljs-number">1</span>) &#123;  <br>        <span class="hljs-keyword">if</span> (realPageCount == <span class="hljs-number">1</span>) &#123;  <br>            AsyncImage(  <br>                model = vm.swiperData[<span class="hljs-number">0</span>].imageUrl,  <br>                contentDescription = <span class="hljs-literal">null</span>,  <br>                modifier = Modifier  <br>                    .fillMaxWidth()  <br>                    .aspectRatio(<span class="hljs-number">7</span> / <span class="hljs-number">3f</span>)  <br>                    .padding(horizontal = <span class="hljs-number">8.</span>dp)  <br>                    .clip(RoundedCornerShape(<span class="hljs-number">8.</span>dp)),  <br>                contentScale = ContentScale.Crop  <br>            )  <br>        &#125;  <br>        <span class="hljs-keyword">return</span>  <br>    &#125;  <br>      <br>    <span class="hljs-comment">// 轮播效果  </span><br>    LaunchedEffect(isPlaying) &#123;  <br>        <span class="hljs-keyword">if</span> (!isPlaying) <span class="hljs-keyword">return</span><span class="hljs-symbol">@LaunchedEffect</span>  <br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>            delay(<span class="hljs-number">3000</span>)   <br>            <span class="hljs-comment">// 在切换页面之前，确认是否正在被用户操作  </span><br>            <span class="hljs-keyword">if</span> (!pagerState.isScrollInProgress) &#123;  <br>                withContext(Dispatchers.Main) &#123;  <br>                    pagerState.animateScrollToPage(pagerState.currentPage + <span class="hljs-number">1</span>)  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 判断用户是否有自己滑动，如果滑动则不进行轮播  </span><br>    LaunchedEffect(pagerState.isScrollInProgress) &#123; <span class="hljs-comment">// 使用稳定的 Key        </span><br>        snapshotFlow &#123; pagerState.isScrollInProgress &#125;  <br>            .debounce(<span class="hljs-number">500</span>) <span class="hljs-comment">// 防抖 500ms            </span><br>            .distinctUntilChanged() <span class="hljs-comment">// 去重  </span><br>            .collect &#123; isScrolling -&gt;  <br>                <span class="hljs-keyword">if</span> (isScrolling) &#123;  <br>                    isPlaying = <span class="hljs-literal">false</span>  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    isPlaying = <span class="hljs-literal">true</span>  <br>                &#125;  <br>            &#125;  <br>    &#125;  <br>    <br>    <span class="hljs-comment">// 判断是否接近边界，重新定位位置  </span><br>    LaunchedEffect(pagerState.currentPage) &#123;  <br>        <span class="hljs-keyword">if</span> (pagerState.currentPage &lt;= <span class="hljs-number">10</span>) &#123;  <br>            pagerState.scrollToPage(<span class="hljs-number">1000</span> * realPageCount)  <br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pagerState.currentPage &gt;= <span class="hljs-built_in">Int</span>.MAX_VALUE - <span class="hljs-number">10</span>) &#123;  <br>            pagerState.scrollToPage(<span class="hljs-number">1000</span> * realPageCount)  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-comment">// 显示轮播图  </span><br>    HorizontalPager(  <br>        state = pagerState,  <br>        modifier = Modifier.padding(horizontal = <span class="hljs-number">8.</span>dp).clip(RoundedCornerShape(<span class="hljs-number">8.</span>dp))  <br>    ) &#123;index -&gt;  <br>        <span class="hljs-keyword">val</span> page = index % realPageCount  <br>        AsyncImage(  <br>            model = vm.swiperData[page].imageUrl,  <br>            contentDescription = <span class="hljs-literal">null</span>,  <br>            modifier = Modifier.fillMaxWidth().aspectRatio(<span class="hljs-number">7</span>/<span class="hljs-number">3f</span>),  <br>            contentScale = ContentScale.Crop,  <br>        )  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>传入自己的ViewModel，使用ViewModel中的图片数据，在判断用户是否有自己滑动，如果滑动则不进行轮播这个部分，使用了debounce防抖处理<strong>快速连续的事件流</strong>，确保只对最后一个事件做出响应，并忽略中间的事件。我最开始没有使用这个导致状态不断切换使轮播图没有自动变换。</p><h1 id="三-轮播通知"><a href="#三-轮播通知" class="headerlink" title="三. 轮播通知"></a>三. 轮播通知</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Composable</span>  <br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">NotificationContent</span><span class="hljs-params">(vm: <span class="hljs-type">MainViewModel</span>)</span></span>&#123;  <br>    Row(modifier = Modifier  <br>        .padding(<span class="hljs-number">8.</span>dp)  <br>        .clip(RoundedCornerShape(<span class="hljs-number">8.</span>dp))  <br>        .background(Color(<span class="hljs-number">0x66149EE7</span>))  <br>        .height(<span class="hljs-number">45.</span>dp)  <br>        .padding(horizontal = <span class="hljs-number">8.</span>dp),  <br>        verticalAlignment = Alignment.CenterVertically,  <br>        horizontalArrangement = Arrangement.SpaceBetween  <br>    )&#123;  <br>        <span class="hljs-keyword">val</span> realPageCount = vm.notifications.size  <br>        <span class="hljs-keyword">val</span> initialPage = <span class="hljs-number">1000</span> * realPageCount <span class="hljs-comment">// 从一个较大的页面开始，营造无限滚动的感觉  </span><br>        <span class="hljs-keyword">var</span> isPlaying <span class="hljs-keyword">by</span> remember &#123; mutableStateOf(<span class="hljs-literal">true</span>) &#125;  <br>  <br>        <span class="hljs-keyword">val</span> pagerState = rememberPagerState(initialPage = initialPage) &#123;  <br>            <span class="hljs-built_in">Int</span>.MAX_VALUE <span class="hljs-comment">// 几乎无限的页面  </span><br>        &#125;  <br>  <br>        LaunchedEffect(isPlaying) &#123;  <br>            <span class="hljs-keyword">if</span> (!isPlaying) <span class="hljs-keyword">return</span><span class="hljs-symbol">@LaunchedEffect</span>  <br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>                delay(<span class="hljs-number">3000</span>)  <br>                <span class="hljs-comment">// 在切换页面之前，确认是否正在被用户操作  </span><br>                <span class="hljs-keyword">if</span> (!pagerState.isScrollInProgress) &#123;  <br>                    withContext(Dispatchers.Main) &#123;  <br>                        pagerState.animateScrollToPage(pagerState.currentPage + <span class="hljs-number">1</span>)  <br>                    &#125;  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-comment">// 判断用户是否有自己滑动，如果滑动则不进行轮播  </span><br>        LaunchedEffect(pagerState.isScrollInProgress) &#123; <span class="hljs-comment">// 使用稳定的 Key            </span><br>        snapshotFlow &#123; pagerState.isScrollInProgress &#125;  <br>                .debounce(<span class="hljs-number">500</span>) <span class="hljs-comment">// 防抖 500ms                </span><br>                .distinctUntilChanged() <span class="hljs-comment">// 去重  </span><br>                .collect &#123; isScrolling -&gt;  <br>                    <span class="hljs-keyword">if</span> (isScrolling) &#123;  <br>                        isPlaying = <span class="hljs-literal">false</span>  <br>                    &#125; <span class="hljs-keyword">else</span> &#123;  <br>                        isPlaying = <span class="hljs-literal">true</span>  <br>                    &#125;  <br>                &#125;  <br>        &#125;  <br>        LaunchedEffect(pagerState.currentPage) &#123;  <br>            <span class="hljs-keyword">if</span> (pagerState.currentPage &lt;= <span class="hljs-number">10</span>) &#123;  <br>                pagerState.scrollToPage(<span class="hljs-number">1000</span> * realPageCount)  <br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pagerState.currentPage &gt;= <span class="hljs-built_in">Int</span>.MAX_VALUE - <span class="hljs-number">10</span>) &#123;  <br>                pagerState.scrollToPage(<span class="hljs-number">1000</span> * realPageCount)  <br>            &#125;  <br>        &#125;  <br>  <br>        Text(  <br>            text = <span class="hljs-string">&quot;最新咨询&quot;</span>,  <br>            color = Color(<span class="hljs-number">0xFF149EE7</span>),  <br>            fontSize = <span class="hljs-number">16.</span>sp,  <br>        )  <br>        Spacer(modifier = Modifier.width(<span class="hljs-number">8.</span>dp))  <br>        VerticalPager(state = pagerState,  <br>            modifier = Modifier.weight(<span class="hljs-number">1f</span>),  <br>        ) &#123;index -&gt;  <br>            <span class="hljs-keyword">val</span> page = index % realPageCount  <br>            Box(  <br>                modifier = Modifier.fillMaxSize(),  <br>                contentAlignment = Alignment.CenterStart <span class="hljs-comment">// 内容居中  </span><br>            ) &#123;  <br>                Text(  <br>                    text = vm.notifications[page],  <br>                    maxLines = <span class="hljs-number">1</span>,  <br>                    overflow = TextOverflow.Ellipsis,  <br>                    fontSize = <span class="hljs-number">14.</span>sp  <br>                )  <br>            &#125;  <br>        &#125;        Text(  <br>            text = <span class="hljs-string">&quot;更多&quot;</span>,  <br>            maxLines = <span class="hljs-number">1</span>,  <br>            fontSize = <span class="hljs-number">14.</span>sp,  <br>        )  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通知的VerticalPager组件中没有verticalAlignment参数，所以要在text外包裹box使它内容居中，还有在最外层的Row中padding的顺序也很重要</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang并发编程</title>
    <link href="/2024/12/17/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/12/17/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Goruntine和Chan"><a href="#1-Goruntine和Chan" class="headerlink" title="1.Goruntine和Chan"></a>1.Goruntine和Chan</h1><p>goruntine是go的协程，chan是为了实现goruntine之间的通讯，go并发的思想是通过通信来共享内存，而不是通过共享内存来通信。相比于java使用thread，goruntine更加轻量级，包含了CPU上下文。而对于并发安全问题，java使用各种同步机制如synchronized关键字、ReentrantLock、Semaphore等，来保证多线程程序的并发安全性。但是，使用Java进行线程管理需要手动管理线程的生命周期和资源，容易出现线程安全问题。Go语言通过Channel机制来保证goroutine之间的安全通信，使得并发编程更加简单和安全。由于Channel是一种基于消息传递的通信方式，因此不会出现死锁和资源竞争等问题。此外，Go语言的运行时系统会自动管理goroutine的调度和资源，减少了开发者的负担，提高了程序的稳定性和安全性。</p><h3 id="避免数据竞争的三种方式："><a href="#避免数据竞争的三种方式：" class="headerlink" title="避免数据竞争的三种方式："></a>避免数据竞争的三种方式：</h3><ol><li>不去写变量。读取不可能出现数据竞争。</li><li>避免从多个 goroutine 访问变量，尽量把变量限定在了一个单独的 goroutine 中。(使用 channel 来共享数据)</li><li>互斥锁</li></ol><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><p>Goroutine 是 Go 语言中实现并发的核心机制。它是一种轻量级的线程，拥有自己的栈空间和程序计数器，但与系统线程相比，它具有以下特点：</p><ul><li><strong>创建和销毁成本低</strong>：Goroutine 的创建和销毁只需很少的系统资源，因此可以轻松创建大量的 Goroutine。</li><li><strong>调度</strong>：Go 语言的运行时会自动调度 Goroutine 在多个 CPU 上执行，充分利用多核 CPU 的资源。</li><li><strong>非抢占式</strong>：Goroutine 是非抢占式的，这意味着它不会抢占其他 Goroutine 正在运行的 CPU 时间。</li></ul><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>Channel 是 Go 语言中用于 goroutine 之间通信的管道。它可以用来传递数据、同步执行等。<br>Channel 具有以下特点：</p><ul><li><strong>类型化</strong>：Channel 可以是特定类型的，这意味着只能发送和接收该类型的数据。</li><li><strong>容量</strong>：Channel 可以有容量限制，这意味着它可以同时存储一定数量的数据。</li><li><strong>阻塞</strong>：Channel 可以是阻塞的，这意味着如果尝试从空 Channel 中接收数据或向满 Channel 中发送数据，操作将会阻塞，直到有数据可供接收或有空间可供发送。<br><img src="/2024/12/17/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Pasted%20image%2020250317162025.png"><br>当主协程接收到 10 个信号后，所有协程都已经完成任务，不会再向通道发送数据。此时，主协程尝试第 11 次从通道接收数据，由于通道中没有新的数据，且没有协程会再发送数据，主协程就会一直阻塞，最终导致死锁错误。而关闭通道可以向接收方表明不会再有新的数据发送到通道中。接收方在通道关闭后，仍然可以从通道中接收已有的数据，当所有数据都被接收后，接收操作会立即返回通道元素类型的零值和一个布尔值 <code>false</code>，表示通道已关闭。<br>使用chan后要释放chan，否则会出现一直读取chan的情况，发生死锁（deadlock！！）<br><img src="/2024/12/17/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Pasted%20image%2020250317163039.png"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    messageCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;  <br>       messageCh &lt;- i  <br>    &#125;  <br>    <span class="hljs-built_in">close</span>(messageCh)  <br>  <br>    <span class="hljs-keyword">for</span> &#123;  <br>       time.Sleep(time.Second)  <br>       msg, ok := &lt;-messageCh  <br>       <span class="hljs-keyword">if</span> !ok &#123;  <br>          <span class="hljs-keyword">break</span>  <br>       &#125;  <br>       fmt.Printf(<span class="hljs-string">&quot;msg:%v, ok:%v\n&quot;</span>, msg, ok)  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="2-时机控制WaitGroup"><a href="#2-时机控制WaitGroup" class="headerlink" title="2.时机控制WaitGroup"></a>2.时机控制WaitGroup</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scss">func <span class="hljs-selector-tag">main</span>() &#123;  <br>    start := time.<span class="hljs-built_in">Now</span>()  <br>    var wg sync.WaitGroup  <br>    for i := <span class="hljs-number">0</span>; <span class="hljs-selector-tag">i</span> &lt; <span class="hljs-number">10</span>; <span class="hljs-selector-tag">i</span>++ &#123;  <br>       wg<span class="hljs-selector-class">.Add</span>(<span class="hljs-number">1</span>)  <br>       go <span class="hljs-built_in">doSome</span>(i, &amp;wg)  <br>    &#125;  <br>    wg<span class="hljs-selector-class">.Wait</span>()  <br>    fmt<span class="hljs-selector-class">.Println</span>(&quot;use time:  &quot;, time.Since(start))  <br>&#125;  <br>  <br>func <span class="hljs-built_in">doSome</span>(number int, wg *sync.WaitGroup) &#123;  <br>    <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Sleep</span>(time.Millisecond * <span class="hljs-number">100</span>)  <br>    fmt<span class="hljs-selector-class">.Printf</span>(&quot;result: %d\n&quot;, number)  <br>    wg<span class="hljs-selector-class">.Done</span>()  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-流程控制Select"><a href="#3-流程控制Select" class="headerlink" title="3.流程控制Select"></a>3.流程控制Select</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go">  <br><span class="hljs-keyword">type</span> MessageServer <span class="hljs-keyword">struct</span> &#123;  <br>    messageCh <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>  <br>    quitCh    <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMessageServer</span><span class="hljs-params">()</span></span> *MessageServer &#123;  <br>    <span class="hljs-keyword">return</span> &amp;MessageServer&#123;  <br>       messageCh: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">100</span>),  <br>       quitCh:    <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">1</span>),  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(s *MessageServer, message <span class="hljs-type">string</span>)</span></span> &#123;  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;  <br>       s.messageCh &lt;- message  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *MessageServer)</span></span> handleMessage(message <span class="hljs-type">string</span>) &#123;  <br>    fmt.Println(<span class="hljs-string">&quot;get message: &quot;</span>, message)  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *MessageServer)</span></span> work() &#123;  <br>    <span class="hljs-keyword">for</span> &#123;  <br>       <span class="hljs-keyword">select</span> &#123;  <br>       <span class="hljs-keyword">case</span> msg := &lt;-s.messageCh:  <br>          s.handleMessage(msg)  <br>       <span class="hljs-keyword">case</span> &lt;-s.quitCh:  <br>          <span class="hljs-keyword">return</span>  <br>       <span class="hljs-keyword">default</span>:  <br>          s.quitCh &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;  <br>       &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    server := NewMessageServer()  <br>    sendMessage(server, <span class="hljs-string">&quot;hello world&quot;</span>)  <br>    server.work()  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-Mutex和Atomic"><a href="#4-Mutex和Atomic" class="headerlink" title="4.Mutex和Atomic"></a>4.Mutex和Atomic</h1><p>防止data race问题（多线程竞争同一资源），做data race检查最好在go test中做</p><h3 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h3><p>类似java中的锁（我感觉都一样）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Counter <span class="hljs-keyword">struct</span> &#123;  <br>    sync.Mutex  <br>    number <span class="hljs-type">int</span>  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Counter)</span></span> AddNumber(i <span class="hljs-type">int</span>, wg *sync.WaitGroup) &#123;  <br>    c.Mutex.Lock()  <br>    <span class="hljs-keyword">defer</span> c.Mutex.Unlock()  <br>    c.number += i  <br>    wg.Done()  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <br>    start := time.Now()  <br>    num := <span class="hljs-number">0</span>  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;  <br>       num += i  <br>    &#125;  <br>    fmt.Printf(<span class="hljs-string">&quot;num: %d, time: %v\n&quot;</span>, num, time.Since(start))  <br>    start = time.Now()  <br>    counter := &amp;Counter&#123;&#125;  <br>    <span class="hljs-keyword">var</span> wg sync.WaitGroup  <br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;  <br>       wg.Add(<span class="hljs-number">1</span>)  <br>       <span class="hljs-keyword">go</span> counter.AddNumber(i, &amp;wg)  <br>    &#125;  <br>    wg.Wait()  <br>    fmt.Printf(<span class="hljs-string">&quot;num: %d, time: %v\n&quot;</span>, counter.number, time.Since(start))  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-sync包"><a href="#5-sync包" class="headerlink" title="5.sync包"></a>5.sync包</h1><h2 id="1-sync包工具"><a href="#1-sync包工具" class="headerlink" title="1.sync包工具:"></a>1.sync包工具:</h2><p>Mutex： 互斥锁<br>RWMutex：读写锁<br>WaitGroup：并发等待组<br>Map：并发安全字典<br>Once：单例模式<br>Cond：同步等待条件<br>Pool：临时对象池</p><h2 id="2-sync-Mutex-互斥锁"><a href="#2-sync-Mutex-互斥锁" class="headerlink" title="2.sync.Mutex(互斥锁)"></a>2.sync.Mutex(互斥锁)</h2><p><code>sync.Mutex</code> 的结构体：<br><img src="/2024/12/17/golang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Pasted%20image%2020250317182527.png"><br>在默认状态下，互斥锁的所有状态位都是 0，<code>int32</code> 中的不同位分别表示了不同的状态：</p><ul><li><code>locked</code>：表示这个锁是否被持有</li><li><code>woken</code>：表示是否从有唤醒的 goroutine</li><li><code>starving</code>：表示此锁是否进入饥饿状态</li><li><code>waitersCount</code>：表示等待此锁的 goroutine 的数量</li></ul><h3 id="饥饿模式"><a href="#饥饿模式" class="headerlink" title="饥饿模式"></a>饥饿模式</h3><p>请求锁的 goroutine 有两类，一类是新来请求锁的 goroutine，另一类是被唤醒的等待请求锁的 goroutine。<br>由于新来的 goroutine 也参与竞争锁，极端情况下，等待中的 goroutine 可能一直获取不到锁，这就是<strong>饥饿问题</strong>。<br>为了解决饥饿，Go为 mutex 增加了<strong>饥饿模式</strong>。<br>在正常模式下，等待中的 goroutine 会按照先进先出的顺序获取锁。但是如果新来的 goroutine 竞争锁，等待中的 goroutine 大概率是获取不到锁的。一旦 goroutine 超 过 1ms 没有获取到锁，它就会将当前互斥锁切换到饥饿模式，保证锁的公平性。<br>在饥饿模式中，互斥锁会直接交给等待队列最前面的 goroutine。新来的 goroutine 在该状态下不能获取锁、也不会进入自旋状态，只会在队列的末尾等待。<br>下面两种情况，mutex 会切换为正常模式:</p><ul><li>一个 goroutine 获得了锁并且它在队列的末尾</li><li>一个 goroutine 等待的时间少于 1ms</li></ul><h3 id="Mutex-Lock-的实现"><a href="#Mutex-Lock-的实现" class="headerlink" title="Mutex.Lock() 的实现"></a>Mutex.Lock() 的实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    mutexLocked = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span> <span class="hljs-comment">// 1</span><br>    mutexWoken <span class="hljs-comment">// 2</span><br>    mutexStarving <span class="hljs-comment">// 4</span><br>    mutexWaiterShift = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 3</span><br>starvationThresholdNs = <span class="hljs-number">1e6</span> <span class="hljs-comment">// 1000000</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Lock() &#123;<br>    <span class="hljs-comment">// Fast path: grab unlocked mutex.</span><br><span class="hljs-comment">// 没有 goroutine 持有锁，也没有等待的 goroutine，当前 goroutine 可以直接获得锁</span><br>    <span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class="hljs-number">0</span>, mutexLocked) &#123;<br>        <span class="hljs-keyword">if</span> race.Enabled &#123;<br>            race.Acquire(unsafe.Pointer(m))<br>        &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br>    <span class="hljs-comment">// Slow path (outlined so that the fast path can be inlined)</span><br><span class="hljs-comment">// 通过自旋等方式竞争锁</span><br>    m.lockSlow()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> lockSlow() &#123;<br><span class="hljs-keyword">var</span> waitStartTime <span class="hljs-type">int64</span><br>starving := <span class="hljs-literal">false</span> <span class="hljs-comment">// 当前 goroutine 的饥饿标记</span><br>awoke := <span class="hljs-literal">false</span> <span class="hljs-comment">// 唤醒标记</span><br>iter := <span class="hljs-number">0</span> <span class="hljs-comment">// 自旋次数</span><br>old := m.state <span class="hljs-comment">// 当前锁的状态</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 锁是非饥饿模式并且还没被释放，尝试自旋</span><br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;<br><span class="hljs-comment">// 尝试设置 mutexWoken 标志来通知解锁，以避免唤醒其他阻塞的 goroutine</span><br><span class="hljs-keyword">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class="hljs-number">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class="hljs-number">0</span> &amp;&amp; <br>atomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;<br>awoke = <span class="hljs-literal">true</span><br>&#125;<br>runtime_doSpin()<br>iter++<br>old = m.state <span class="hljs-comment">// 再次获取锁的状态，后面会检查锁是否被释放了</span><br><span class="hljs-keyword">continue</span><br>&#125;<br>        <span class="hljs-built_in">new</span> := old<br>        <span class="hljs-keyword">if</span> old&amp;mutexStarving == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> |= mutexLocked <span class="hljs-comment">// 非饥饿状态，加锁</span><br>&#125;<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> += <span class="hljs-number">1</span> &lt;&lt; mutexWaiterShift <span class="hljs-comment">// waiter 数量加 1</span><br>&#125;<br>        <span class="hljs-keyword">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">new</span> |= mutexStarving <span class="hljs-comment">// 设置饥饿状态</span><br>&#125;<br><span class="hljs-keyword">if</span> awoke &#123;<br><span class="hljs-comment">// The goroutine has been woken from sleep, </span><br><span class="hljs-comment">// so we need to reset the flag in either case. </span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexWoken == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: inconsistent mutex state&quot;</span>)<br>&#125;<br><span class="hljs-built_in">new</span> &amp;^= mutexWoken <span class="hljs-comment">// 新状态清除唤醒标记</span><br>&#125;<br>        <span class="hljs-comment">// 设置新状态</span><br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br>            <span class="hljs-comment">// 再次检查，原来锁的状态已释放，并且不是饥饿状态，正常请求到了锁，返回</span><br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexStarving) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">break</span> <span class="hljs-comment">// locked the mutex with CAS</span><br>&#125;<br><span class="hljs-comment">// 处理饥饿状态</span><br><span class="hljs-comment">// 如果之前就在该队列里面，就加入到队列头</span><br>queueLifo : waitStartTime != <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> waitStartTime == <span class="hljs-number">0</span> &#123;<br>waitStartTime = runtime_nanotime()<br>&#125;<br>            <span class="hljs-comment">// runtime_SemacquireMutex 通过信号量保证资源不会被两个 goroutine 获取</span><br><span class="hljs-comment">// runtime_SemacquireMutex 会在方法中不断尝试获取锁并陷入休眠等待信号量的释放</span><br><span class="hljs-comment">// 也就是这里会阻塞等待</span><br><span class="hljs-comment">// 一旦当前 goroutine 可以获取信号量，它就会立刻返回，剩余代码也会继续执行</span><br>runtime_SemacquireMutex(&amp;m.sema, queueLifo, <span class="hljs-number">1</span>)<br><span class="hljs-comment">// 在正常模式下，这段代码会设置唤醒和饥饿标记、重置迭代次数并重新执行获取锁的循环</span><br>            <span class="hljs-comment">// 在饥饿模式下，当前 goroutine 会获得锁，如果等待队列中只存在当前 goroutine，锁还会从饥饿模式中退出</span><br>starving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs<br>old = m.state<br><span class="hljs-keyword">if</span> old&amp;mutexStarving != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">if</span> old&amp;(mutexLocked|mutexWoken) != <span class="hljs-number">0</span> || old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> &#123;<br>throw(<span class="hljs-string">&quot;sync: inconsistent mutex state&quot;</span>)<br>&#125;<br>delta := <span class="hljs-type">int32</span>(mutexLocked - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift)<br><span class="hljs-keyword">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class="hljs-number">1</span> &#123;<br>delta -= mutexStarving<br>&#125;<br>atomic.AddInt32(&amp;m.state, delta)<br><span class="hljs-keyword">break</span><br>&#125;<br>awoke = <span class="hljs-literal">true</span><br>iter = <span class="hljs-number">0</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>old = m.state<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>race.Acquire(unsafe.Pointer(m))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自旋"><a href="#自旋" class="headerlink" title="自旋"></a>自旋</h4><p>自旋是一种多线程同步机制，<strong>当前的进程在进入自旋的过程中会一直保持 CPU 的占用</strong>，持续检查某个条件是否为真。在多核的 CPU 上，自旋可以避免 goroutine 的切换， 使用恰当会对性能带来很大的增益，但是使用的不恰当就会拖慢整个程序，所以 goroutine 进入自旋的条件非常苛刻：</p><ol><li><code>old&amp;(mutexLocked|mutexStarving) == mutexLocked</code> 只有在普通模式</li><li><code>runtime_canSpin(iter)</code> 为真：<ul><li>运行在多 CPU 的机器上</li><li>自旋的次数小于四次</li><li>当前机器上至少存在一个正在运行的处理器 P 并且处理的运行队列为空</li></ul></li></ol><h3 id="Mutex-Unlock-的实现"><a href="#Mutex-Unlock-的实现" class="headerlink" title="Mutex.Unlock() 的实现"></a>Mutex.Unlock() 的实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> Unlock() &#123;<br><span class="hljs-keyword">if</span> race.Enabled &#123;<br>_ = m.state<br>race.Release(unsafe.Pointer(m))<br>&#125;<br><br><span class="hljs-comment">// Fast path: drop lock bit.</span><br><span class="hljs-comment">// new == 0 成功释放锁</span><br><span class="hljs-built_in">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span> != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Outlined slow path to allow inlining the fast path.</span><br><span class="hljs-comment">// To hide unlockSlow during tracing we skip one extra frame when tracing GoUnblock.</span><br>m.unlockSlow(<span class="hljs-built_in">new</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m *Mutex)</span></span> unlockSlow(<span class="hljs-built_in">new</span> <span class="hljs-type">int32</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">new</span>+mutexLocked)&amp;mutexLocked == <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// unlock 一个未加锁的锁</span><br>fatal(<span class="hljs-string">&quot;sync: unlock of unlocked mutex&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">new</span>&amp;mutexStarving == <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// 正常模式</span><br>old := <span class="hljs-built_in">new</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 不存在等待者 或者 mutexLocked、mutexStarving、mutexWoken 状态不都为 0</span><br><span class="hljs-comment">// 则不需要唤醒其他等待者</span><br><span class="hljs-keyword">if</span> old&gt;&gt;mutexWaiterShift == <span class="hljs-number">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 存在等待者，通过 runtime_Semrelease 唤醒等待者并移交锁的所有权</span><br><span class="hljs-built_in">new</span> = (old - <span class="hljs-number">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken<br><span class="hljs-keyword">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class="hljs-built_in">new</span>) &#123;<br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">false</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>old = m.state<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 饥饿模式</span><br><span class="hljs-comment">// 直接调用 runtime_Semrelease 将当前锁交给下一个正在尝试获取锁的等待者，等待者被唤醒后会得到锁，在这时还不会退出饥饿状态</span><br>runtime_Semrelease(&amp;m.sema, <span class="hljs-literal">true</span>, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-sync-RWMutex"><a href="#3-sync-RWMutex" class="headerlink" title="3.sync.RWMutex"></a>3.sync.RWMutex</h2><p>读写互斥锁 <code>sync.RWMutex</code> 是细粒度的互斥锁，一般来说有几种情况：</p><ul><li>读锁之间不互斥</li><li>写锁之间是互斥的</li><li>写锁与读锁是互斥的<br><code>sync.RWMutex</code> 类型中的 <code>Lock</code> 方法和 <code>Unlock</code> 方法用于对写锁进行锁定和解锁，<code>RLock</code> 方法和 <code>RUnlock</code> 方法则分别用于对读锁进行锁定和解锁。</li></ul><h2 id="4-sync-WaitGroup"><a href="#4-sync-WaitGroup" class="headerlink" title="4.sync.WaitGroup"></a>4.sync.WaitGroup</h2><p><code>sync.WaitGroup</code> 可以等待一组 goroutine 的返回，常用于处理批量的并发任务。它是并发安全的。<br><code>WaitGroup</code> 提供了三个方法：</p><ul><li><code>Add</code>：用来设置 <code>WaitGroup</code> 的计数值。</li><li><code>Done</code>：用来将 <code>WaitGroup</code> 的计数值减 1，其实就是调用了 <code>Add(-1)</code>。</li><li><code>Wait</code>：调用这个方法的 <code>goroutine</code> 会一直阻塞，直到 <code>WaitGroup</code> 的计数值变为 0。<br>不要把 <code>Add</code> 和 <code>Wait</code> 方法的调用放在不同的 goroutine 中执行，以免 <code>Add</code> 还未执行，<code>Wait</code> 已经退出<br>尽量不要重用 <code>WaitGroup</code>。新建一个 <code>WaitGroup</code> 不会带来多大的资源 开销，重用反而更容易出错。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// src/sync/cond.go#L117</span><br><span class="hljs-keyword">type</span> noCopy <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-comment">// Lock is a no-op used by -copylocks checker from `go vet`.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*noCopy)</span></span> Lock()   &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*noCopy)</span></span> Unlock() &#123;&#125;<br></code></pre></td></tr></table></figure><code>noCopy</code> 是 go 1.7 开始引入的一个静态检查机制，它只是一个辅助类型<code>tools/go/analysis/passes/copylock</code> 包中的分析器会在编译期间检查被拷贝的变量中是否包含 <code>noCopy</code> 或者实现了 <code>Lock</code> 和 <code>Unlock</code> 方法，如果包含该结构体或者实现了对应的方法就会报错</li></ul><h3 id="关于noCopy"><a href="#关于noCopy" class="headerlink" title="关于noCopy"></a>关于noCopy</h3><p><code>noCopy</code> 类型以及相关的 <code>Lock</code> 和 <code>Unlock</code> 方法的设计主要是为了防止某些结构体被意外拷贝</p><p>以下是一些通常需要不可拷贝属性的类：</p><ul><li><strong>资源管理类</strong>：比如文件操作类，若允许拷贝，可能导致多个副本同时操作同一个文件，引发数据混乱或文件资源被滥用。再如数据库连接管理类，拷贝该类实例可能造成多个副本同时连接数据库，超出数据库连接池的限制，影响系统性能和稳定性。</li><li><strong>状态管理类</strong>：像游戏中的角色状态类，每个角色的状态是唯一且独立的，若进行拷贝，可能导致角色状态混乱，影响游戏逻辑。还有 Web 应用中的用户会话管理类，每个用户的会话状态是特定的，拷贝会话管理类实例可能导致用户状态混淆，引发安全问题或错误的业务逻辑。</li><li><strong>单例类</strong>：单例模式确保一个类只有一个实例存在于系统中。若允许拷贝单例类，就会破坏单例模式的唯一性，可能导致系统中出现多个不同状态的 “单例” 实例，引发逻辑错误和资源管理混乱。</li><li><strong>并发控制类</strong>：例如使用互斥锁（Mutex）来控制并发访问的类，若可拷贝，可能会出现多个副本同时尝试获取锁，导致并发控制失效，引发数据竞争和不一致性问题。</li><li><strong>内部有唯一标识或指针的类</strong>：当类内部包含唯一标识（如 UUID）或指针指向特定的内存区域、外部资源时，拷贝该类可能导致多个实例拥有相同的标识或指向相同的资源，进而引发冲突或资源管理错误。</li></ul><p>静态分析代码：<br><code>go vet</code> 工具属于 Go 标准库的一部分，其工作原理是对代码进行静态分析，也就是在不运行代码的情况下分析代码的结构与语义。在使用 <code>-copylocks</code> 检查器时，<code>go vet</code> 会执行以下操作：<br><strong>1.解析代码</strong><br><code>go vet</code> 会对代码进行解析，构建抽象语法树（AST）。抽象语法树是代码的一种树形表示，它能体现代码的语法结构。<br><strong>2.查找 <code>noCopy</code> 字段</strong><br><code>go vet</code> 会遍历抽象语法树，查找包含 <code>noCopy</code> 类型字段的结构体。当发现这样的结构体时，它会记录下来。<br><strong>3.检查拷贝操作</strong><br>接着，<code>go vet</code> 会查找代码里对这些包含 <code>noCopy</code> 字段的结构体进行拷贝的操作。拷贝操作可能有以下几种情况：赋值，函数参数传递，函数返回值。<br><strong>4.发出警告</strong><br>一旦 <code>go vet</code> 发现对包含 <code>noCopy</code> 字段的结构体进行了拷贝操作，就会发出警告，提醒开发者可能存在的问题。</p><h2 id="5-sync-Cond"><a href="#5-sync-Cond" class="headerlink" title="5.sync.Cond"></a>5.sync.Cond</h2><p><code>sync.Cond</code> 基于互斥锁&#x2F;读写锁<br>和互斥锁的区别：<br>互斥锁 <code>sync.Mutex</code> 通常用来保护临界区和共享资源，条件变量 <code>sync.Cond</code> 用来协调想要访问共享资源的 goroutine。<br><code>sync.Cond</code> 经常用在多个 goroutine 等待，一个 goroutine 通知的场景。<br><code>NewCond</code> 用来创建 <code>sync.Cond</code> 实例，<code>sync.Cond</code> 暴露了几个方法：</p><ul><li><code>Broadcast</code> 用来唤醒所有等待条件变量的 goroutine，无需锁保护。</li><li><code>Signal</code> 唤醒一个 goroutine。</li><li><code>Wait</code> 调用 <code>Wait</code> 会自动释放锁，并挂起调用者所在的 goroutine，也就是当前 goroutine 会阻塞在 <code>Wait</code> 方法调用的地方。如果其他 goroutine 调用了 <code>Signal</code> 或 <code>Broadcast</code> 唤醒 了该 goroutine，那么 <code>Wait</code> 方法在结束阻塞时，会重新加锁，并且继续执行 <code>Wait</code> 后面的代码。<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">var status int64<br><br>func main() &#123;<br><span class="hljs-attribute">c</span> := sync<span class="hljs-variable">.NewCond</span>(&amp;sync<span class="hljs-variable">.Mutex</span>&#123;&#125;)<br>for i := 0; <span class="hljs-attribute">i &lt; 10; i++ &#123;</span><br><span class="hljs-attribute">go listen(c)</span><br><span class="hljs-attribute">&#125;</span><br><span class="hljs-attribute">time.Sleep(1 * time.Second)</span><br><span class="hljs-attribute">go broadcast(c)</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">ch</span> := make(chan os<span class="hljs-variable">.Signal</span>, 1)<br>signal<span class="hljs-variable">.Notify</span>(ch, os<span class="hljs-variable">.Interrupt</span>)<br>&lt;-ch<br>&#125;<br><br>func broadcast(c *sync<span class="hljs-variable">.Cond</span>) &#123;<br>c<span class="hljs-variable">.L</span><span class="hljs-variable">.Lock</span>()<br>atomic<span class="hljs-variable">.StoreInt</span>64(&amp;status, 1)<br>c<span class="hljs-variable">.Broadcast</span>()<br>c<span class="hljs-variable">.L</span><span class="hljs-variable">.Unlock</span>()<br>&#125;<br><br>func listen(c *sync<span class="hljs-variable">.Cond</span>) &#123;<br>c<span class="hljs-variable">.L</span><span class="hljs-variable">.Lock</span>()<br>for atomic<span class="hljs-variable">.LoadInt</span>64(&amp;status) != 1 &#123; <br>c<span class="hljs-variable">.Wait</span>()<br>&#125;<br>fmt<span class="hljs-variable">.Println</span>(&quot;listen&quot;)<br>c<span class="hljs-variable">.L</span><span class="hljs-variable">.Unlock</span>()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><code>status</code>：互斥锁需要保护的条件变量。</li><li><code>listen()</code> 调用 <code>Wait()</code> 等待通知，直到 <code>status</code> 为 1。</li><li><code>broadcast()</code> 将 <code>status</code> 置为 1，调用 <code>Broadcast()</code> 通知所有等待的 goroutine。</li></ul><h2 id="6-sync-Once"><a href="#6-sync-Once" class="headerlink" title="6.sync.Once"></a>6.sync.Once</h2><p>Go 标准库中 <code>sync.Once</code> 可以保证 Go 程序运行期间的某段代码只会执行一次。常常用于单例对象的初始化场景。<br><code>sync.Once</code> 只有一个对外唯一暴露的方法 <code>Do</code>，可以多次调用，但是只第一次调用时会执行一次。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    o := &amp;sync.Once&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        o.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;only once&quot;</span>)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span><br><span class="hljs-keyword">only</span> once<br></code></pre></td></tr></table></figure><h2 id="7-Context"><a href="#7-Context" class="headerlink" title="7.Context"></a>7.Context</h2><p>主要的作用是在在一组 goroutine 之间传递共享的值、取消信号、deadline 等。<code>context.Context</code>并不是一个具体的实现，而是一个定义了一组方法的接口，Context接口共有四个方法。</p><ul><li><code>Deadline</code> — 返回当前 context 的截止时间。</li><li><code>Done</code> — 返回一个只读的 channel，可用于识别当前 channel 是否已经被关闭，其原因可能是到期，也可能是被取消了。多次调用 <code>Done</code> 方法会返回同一个 channel。</li><li><code>Err</code> — 返回当前 context 被关闭的原因。<ul><li>如果 context 被取消，会返回 <code>Canceled</code> 错误。</li><li>如果 context 超时，会返回 <code>DeadlineExceeded</code> 错误。</li></ul></li><li><code>Value</code> — 返回当前 context 对应所存储的 context信息，可以用来传递请求特定的数据。<br>创建 context：</li><li><code>Background</code>：创建一个空的 context，一般用在主函数、初始化、测试以及创建 root context 的时候。</li><li><code>TODO</code>：创建一个空的 context，不知道要传递一些什么上下文信息的时候，就用这个。</li><li><code>WithCancel</code>：基于 parent context 创建一个可以取消的新 context。</li><li><code>WithTimeout</code>：基于 parent context 创建一个具有<strong>超时时间</strong>的新 context。</li><li><code>WithDeadline</code>：和 <code>WithTimeout</code> 一样，只不过参数是<strong>截止时间</strong>（超时时间加上当前时间）。</li><li><code>WithValue</code>：基于某个 context 创建并存储对应的上下文信息。</li></ul><h1 id="6-atomic包（原子操作）"><a href="#6-atomic包（原子操作）" class="headerlink" title="6.atomic包（原子操作）"></a>6.atomic包（原子操作）</h1><p>Go 的标准库 <code>sync/atomic</code> 提供了一些实现原子操作的方法：</p><ul><li>Add</li><li>CompareAndSwap（简称 CAS）</li><li>Load</li><li>Swap</li><li>Store<br><strong>互斥锁与原子操作</strong><br>区别：</li><li><strong>互斥锁是用来保护临界区，原子操作用于对一个变量的更新保护</strong>。</li><li>互斥锁由操作系统的调度器实现，原子操作由底层硬件指令直接提供支持。<br>使用互斥锁实现并发计数：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MutexAdd</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-type">int32</span> =  <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">var</span> mu sync.Mutex<br>start := time.Now()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>mu.Lock()<br>a += <span class="hljs-number">1</span><br>mu.Unlock()<br>&#125;()<br>&#125;<br>wg.Wait()<br>timeSpends := time.Now().Sub(start).Nanoseconds()<br>    fmt.Printf(<span class="hljs-string">&quot;mutex value %d, spend time: %v\n&quot;</span>, a, timeSpends)<br>&#125;<br></code></pre></td></tr></table></figure>使用原子操作替换互斥锁：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AtomicAdd</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-type">int32</span> =  <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>start := time.Now()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>atomic.AddInt32(&amp;a, <span class="hljs-number">1</span>)<br>&#125;()<br>&#125;<br>wg.Wait()<br>timeSpends := time.Now().Sub(start).Nanoseconds()<br>    fmt.Printf(<span class="hljs-string">&quot;atomic value %d, spend time: %v\n&quot;</span>, atomic.LoadInt32(&amp;a), timeSpends)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted-image-20241110190125.png" alt="计算机网络基本结构"><br>先展示一下这个经典结构，然后用一个数据包的一生来逐一解释整个计算机网络</p><h1 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h1><p><strong>解决的问题：</strong> 提供网络应用服务<br><strong>功能：</strong> 应用层直接面向用户，提供各种网络应用服务。它是用户与网络之间的接口，负责处理特定的应用程序协议（如HTTP、HTTPS、FTP、SMTP等），使用户能够通过网络进行通信。<br><strong>主要任务：</strong></p><ol><li>应用协议的实现：如HTTP（用于网页浏览）、FTP（用于文件传输）、SMTP（用于电子邮件）等。</li><li>数据格式的转换：将数据转换为应用程序能够理解的格式。</li><li>用户认证与授权：处理用户的身份验证和权限管理。</li><li>数据加密与解密：SSL&#x2F;TLS加密确保数据的安全性。</li></ol><h2 id="HTTP-Hypertext-Transfer-Protocol-超文本传输协议"><a href="#HTTP-Hypertext-Transfer-Protocol-超文本传输协议" class="headerlink" title="HTTP(Hypertext Transfer Protocol)超文本传输协议"></a>HTTP(Hypertext Transfer Protocol)超文本传输协议</h2><p>当我们打开一个网站时，会输入一个网址，这个网址就是url<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110220019.png"><br>url代表了我们要向服务器请求的资源，对url进行解析后，确定了请求信息，接下来就可以遵循HTTP协议把这些信息封装成一个HTTP请求，而请求主要是GET请求，POST请求，还有PUT请求，DELETE请求等，但是最常用的就是GET，POST请求，一个POST请求由请求行，请求头，请求头三部分构成，而GET请求没有请求体。</p><p>&#x3D;&#x3D;下图就是一个POST请求的报文形式。&#x3D;&#x3D;<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110221245.png"></p><p>这样一个请求数据包就诞生了，接下来就需要为他指路，让他知道请求的是哪个服务器</p><h2 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h2><p>我们平时打开网页时都是输入的网址，例如:<a href="http://www.baidu.com/">www.baidu.com</a> 但是计算机是无法识别域名的，在计算机的网络中只有IP, MAC地址可以被解读，那么我们就要想办法将域名解析为服务器IP，这时候就用到了DNS解析。接下来讲解一下DNS解析的步骤。</p><ol><li><strong>第一步</strong><br>本地电脑会检查浏览器缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就结束。浏览器缓存域名也是有限制的，不仅浏览器缓存大小有限制，而且缓存的时间也有限制，通常情况下为几分钟到几小时不等，域名被缓存的时间限制可以通过TTL属性来设置。这个缓存时间太长和太短都不太好，如果时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有一部分用户无法访问网站。如果设置时间太短，会导致用户每次访问网站都要重新解析一次域名。</li><li><strong>第二步</strong><br>如果浏览器缓存中没有数据，浏览器会查找操作系统缓存中是否有这个域名对应的DNS解析结果。</li><li><strong>第三步</strong><br>前两个过程无法解析时，就要用到我们网络配置中的”DNS服务器地址”了。操作系统会把这个域名发送给这个本地DNS服务器。每个完整的内网通常都会配置本地DNS服务器。它们一般都会缓存域名解析结果，当然缓存时间是受到域名的失效时间控制的。大约80%的域名解析到这里就结束了，后续的DNS迭代和递归也是由本地DNS服务器负责。</li><li><strong>第四步</strong><br>如果本地DNS服务器仍然没有命中，就直接到根DNS服务器请求解析。</li><li><strong>第五步</strong><br>根DNS服务器返回给本地DNS域名服务器一个顶级DNS服务器地址，它是国际顶级域名服务器，如.com、.cn、.org等，全球只有13台左右。</li><li><strong>第六步</strong><br>本地DNS服务器再向上一步获得的顶级DNS服务器发送解析请求。接受请求的顶级DNS服务器查找并返回此域名对应的Name Server域名服务器的地址，这个Name Server服务器就是我要访问的网站域名提供商的服务器，其实该域名的解析任务就是由域名提供商的服务器来完成。   比如我要访问 <a href="http://www.baidu.com,/">www.baidu.com，</a> 而这个域名是从A公司注册获得的，那么A公司上的服务器就会有<a href="http://www.baidu.com的相关信息./">www.baidu.com的相关信息。</a></li><li><strong>第七步</strong><br>Name Server服务器会查询存储的域名和IP的映射关系表，再把查询出来的域名和IP地址等等信息，连同一个TTL值返回给本地DNS服务器。本地DNS服务器会缓存这个域名和IP的对应关系，缓存时间由TTL值控制。</li><li><strong>第八步</strong><br>把解析的结果返回给本地电脑，本地电脑根据TTL值缓存在本地系统缓存中，域名解析过程结束在实际的DNS解析过程中，可能还不止这10步，如Name Server可能有很多级，或者有一个GTM来负载均衡控制，这都有可能会影响域名解析过程</li></ol><p>&#x3D;&#x3D;下图为一个DNS解析的流程&#x3D;&#x3D;<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110223235.png"></p><p>这样数据包就找到了自己的目的地了。而HTTP(HTTPS)协议和DNS协议就是在&#x3D;&#x3D;应用层&#x3D;&#x3D;上的协议</p><h1 id="2-传输层"><a href="#2-传输层" class="headerlink" title="2.传输层"></a>2.传输层</h1><p><strong>解决的问题：</strong> 端到端的可靠传输<br><strong>功能：</strong> 传输层负责在源端和目的端之间提供可靠的、端到端的数据传输服务。它确保数据能够完整、正确地从发送方传输到接收方，并处理数据传输中的差错和流量控制。<br><strong>主要任务：</strong></p><ol><li>端口管理：通过端口号区分不同的应用程序（如HTTP使用端口80，HTTPS使用端口443）。</li><li>可靠传输：通过确认机制（如TCP的三次握手）确保数据包的可靠传输。</li><li>流量控制：防止发送方发送过多数据，导致接收方无法处理。</li><li>错误检测与恢复：通过重传机制确保丢失或损坏的数据包能够被重新发送。</li><li>数据分段与重组：将大数据分段传输，并在接收端重新组装。</li></ol><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP协议就是工作在传输层上的协议，TCP协议是面向连接的可靠协议，所以在发送数据之前要先与目标服务器进行TCP连接，就是经典的三次握手，三次握手目的是保证双方都有发送和接收的能力。&#x3D;&#x3D;下图前三次就是建立握手的过程&#x3D;&#x3D;<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110224644.png"><br>&#x3D;&#x3D;下图是一个简单的TCP建立连接的模型&#x3D;&#x3D;<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110224730.png"><br>接下来解读一下TCP头部</p><h3 id="TCP头部字段"><a href="#TCP头部字段" class="headerlink" title="TCP头部字段"></a>TCP头部字段</h3><p><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110225009.png"><br>首先，源端口号和目标端口号是不可少的，如果没有这两个端口号，数据就不知道应该发给哪个应用。<br>接下来有包的序号，这个是为了解决包乱序的问题。<br>还有应该有的是确认号，目的是确认发出去对方是否有收到。如果没有收到就应该重新发送，直到送达，这个是为了解决丢包的问题。<br>接下来还有一些状态位。例如 SYN 是发起一个连接，ACK 是回复，RST 是重新连接，FIN 是结束连接等。TCP 是面向连接的，因而双方要维护连接的状态，这些带状态位的包的发送，会引起双方的状态变更。<br>还有一个重要的就是窗口大小。TCP 要做流量控制，通信双方各声明一个窗口（缓存大小），作用是为了解决发送方和接收方速度不同而导致的数据丢失问题,当发送方发送的太快,接收方来不及接受就会导致数据丢失。<br>除了做流量控制以外，TCP还会做拥塞控制，为了解决过多的数据注入到网络导致网络崩溃和超负荷问题。<br>接下来讲解一下流量控制和拥塞控制<br><strong>流量控制</strong><br>发送端会根据自己的实际情况发送数据，但因为接收端接收不过来的话，接收方只能把处理不过来的数据存在缓存区里。如果缓存区都满了对方还在疯狂发送数据，接收方只能把收到的数据包丢掉，这就造成了网络资源的浪费！典型的场景如以太网场景中10G设备向1G设备发TCP包。<br>为了防止这种现象的发生，TCP 提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量。这就是所谓的流量控制。<br>它的具体操作是：<br>（1）接收端主机向发送端主机通知自已可以接收数据的大小；<br>（2）于是发送端会发送不超过这个限度的数据，该大小限度就被称作窗口大小。窗口大小的值由接收端主机决定，而在TCP 首部中，就有一个字段用来通知窗口大小<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110225641.png"><br>（3）接收主机将自己可以接收的缓冲区大小放入这个字段中通知给发送端，这个字段的值越大，说明网络的吞吐量越高。<br>不过，接收端的这个缓冲区一旦面临数据溢出时，窗口大小的值也会随之被设置为一个更小的值通知给发送端，从而控制数据发送量。也就是说，发送端主机会根据接收端主机的指示，对发送数据的量进行控制。这也就形成了一个完整的TCP流控制(流量控制)。当Window&#x3D;0时，即告知发送方停止发送数据。<br><strong>拥塞控制</strong><br>先了解两个概念：<br>拥塞窗口（cwnd）：发送方维持的一个状态变量，其大小取决于网络的拥塞程度，并且动态变化。<br>慢开始门限（ssthresh）：为了防止拥塞窗口cwnd的增长过大引起网络拥塞所设置的一个门限值。<br>通过四种算法实现拥塞管理：<br>1.慢开始<br>2.拥塞避免<br>3.超时重传（1988年TCP Tahoe版本，已废弃不用）<br>4.快重传（1990年Reno版本，在用）<br>5.快恢复（1990年Reno版本，在用）<br>也就是说发送方会动态判定网络状态并按照上述算法调整TCP的发包节奏，那么如何确认使用算法呢？如下：<br>当cwnd &lt; ssthresh时，使用慢开始算法；<br>当cwnd &gt; ssthresh时，停止使用慢开始算法而改用拥塞避免算法；<br>当cwnd &#x3D; ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。</p><ol><li><strong>慢开始</strong><br>发送方先探测网络拥塞程度，并不是一开始就发送大量的数据，发送方会根据拥塞程度增大拥塞窗口cwnd。<br>计算方法：每经过一个传输轮次cwnd值就加倍，让cwnd值呈指数增加。<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110231829.png"><br>如上图，大体过程：<br>1.当前发送方cwnd值为1，因此只能发送一个数据报文段（拥塞窗口cwnd值是几就能发送几个数据段）<br>2.接收方收到该数据报文段后回复一个确认报文段，发送方收到该确认报文后，将cwnd值变为2(加倍)；<br>3.发送方此时可以连续发送两个数据段，接收方收到该数据段后一次发回2个确认报文段；<br>4.发送方收到这两个确认报文后，将cwnd值加2变为4（加倍）后可以连续发送4个数据段，以此类推直至cwnd&#x3D;ssthresh。</li><li><strong>拥塞避免</strong><br>继上图达到cwnd≥ssthresh后采用该算法用来控制拥塞窗口的增长速率。<br>计算方法：每经过一个传输轮次cwnd值加1，让cwnd值呈线性缓慢增大。<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110232026.png"></li><li><strong>拥塞发生</strong><br>当网络发生拥塞丢包时（如图假定cwnd&#x3D;24）<br><strong>● 快重传和快恢复（1990年TCP Reno版本，在用）</strong><br>超时重传算法直接把cwnd减小到1太过强烈，若还能收到连续3个ACK说明网络质量没那么差。同时采用快重传和快恢复算法，过程如下：</li></ol><p>（1）当发送方连续收到3个重复确认时即执行“乘法减小”算法，把慢开始门限ssthresh 减半；<br>（2）由于发送方现在认为网络不那么差，于是把cwnd值设置为开始门限ssthresh 减半后的数值；<br>（3）开始执行拥塞避免算法 (“加法增大”)使拥塞窗口缓慢地线性增大。<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110232211.png"><br>这样就解释完了TCP协议的所有字段。</p><h3 id="TCP-分割数据"><a href="#TCP-分割数据" class="headerlink" title="TCP 分割数据"></a>TCP 分割数据</h3><p>如果 HTTP 请求消息比较长，超过了 MSS 的长度，这时 TCP 就需要把 HTTP 的数据拆解成一块块的数据发送，而不是一次性发送所有数据。<br>MTU：一个网络包的最大长度，以太网中一般为 1500 字节。<br>MSS：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110232538.png"></p><h3 id="TCP报文组装"><a href="#TCP报文组装" class="headerlink" title="TCP报文组装"></a>TCP报文组装</h3><p>将TCP报文和之前的HTTP报文组装在一起，TCP协议就完成了他的任务了。<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Pasted%20image%2020241110232710.png"></p><h1 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h1><p><strong>解决的问题：</strong> 跨网络的路由与寻址<br><strong>功能：</strong> 网络层负责在不同网络之间传输数据包，并选择最佳路径将数据从源节点传输到目标节点。它处理逻辑地址（如IP地址）和路由选择问题。<br><strong>主要任务：</strong></p><ol><li>IP地址的分配与管理：为每个设备分配唯一的IP地址。</li><li>路由选择：根据路由表和路由协议，选择数据包从源到目的地的最佳路径。</li><li>数据包的转发：通过路由器将数据包从一个网络转发到另一个网络。</li><li>分组与重组：如果数据包过大，网络层可以将其分割成更小的包，并在接收端重新组装。</li></ol><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP协议是工作在网络层的协议，为了让数据包知道他应该发送到哪里。<br>我们先看看 IP 报文头部的格式：<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/img.png"><br>在 IP 协议里面需要有源地址 IP 和 目标地址 IP：<br>源地址IP，即是客户端的 IP 地址。<br>目标地址，即通过 DNS 域名解析得到的 Web 服务器 IP。<br>其中的协议就是传输层所用的协议(TCP，UDP等)</p><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p><strong>解决的问题：</strong> 可靠的数据帧传输<br><strong>功能：</strong> 数据链路层负责在相邻节点之间可靠地传输数据帧，并处理物理层可能出现的错误。它将物理层的比特流组织成帧，并确保这些帧能够在同一局域网内正确传输。<br><strong>主要任务：</strong></p><ol><li>帧的封装和解封装：将数据封装成帧，添加头部和尾部（包括MAC地址等信息）。</li><li>错误检测与纠正：通过校验和等机制检测传输错误。</li><li>流量控制：防止发送方发送过多数据，导致接收方处理不过来。</li><li>介质访问控制（MAC）：控制设备如何在共享的传输介质上访问网络（如以太网中的CSMA&#x2F;CD机制）。</li></ol><h2 id="MAC地址与ARP协议"><a href="#MAC地址与ARP协议" class="headerlink" title="MAC地址与ARP协议"></a>MAC地址与ARP协议</h2><p>数据链路层最基本的服务是将源计算机网络层来的数据可靠的传输到相邻节点的目标计算机的网络层。为达到这一目的，数据链路层必须具备一系列相应的功能，主要有：如何将数据组合成数据块（在数据链路层中将这种数据块称为帧，帧是数据链路层的传送单位）；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使之与接收方相匹配；在两个网路实体之间提供数据链路通路的建立、维持和释放管理。<br>而相邻节点之间的传输要依靠MAC地址进行，网络包还需要在 IP 头部的前面加上 MAC 头部。MAC 头部是以太网使用的头部，它包含了接收方和发送方的 MAC 地址等信息。在以太网环境中，数据的传输所依懒的是MAC地址而非IP地址，而将已知<strong>IP地址转换为MAC地址</strong>的工作是由ARP协议来完成的。<br>首先当数据要离开当前以太网时，主机要将数据发送到对应路由上，数据如果是第一次发送，并且主机不知道路由器的MAC地址，那么主机首先会发送一个ARP（Address Resolution Protocol）请求。这个ARP请求是一个广播帧，它包含以下信息：</p><ul><li>源MAC地址：发送ARP请求的主机的MAC地址。</li><li>源IP地址：发送ARP请求的主机的IP地址。</li><li>目标MAC地址：全F的广播地址（例如，FF:FF:FF:FF:FF:FF）。</li><li>目标IP地址：路由器的IP地址。</li></ul><p>在这个广播帧中，主机使用自己的IP地址和MAC地址，并且询问“拥有这个IP地址的主机的MAC地址是什么？”这样的询问是以广播的形式发送到整个局域网中，目的是为了找到与目标IP地址相对应的MAC地址。</p><p>因此，第一次发送广播时，主机实际上是在询问目标IP地址对应的MAC地址，而不是直接发送IP数据包。一旦路由器响应了ARP请求，主机就会得到路由器的MAC地址，并使用这个MAC地址来封装后续的数据包，然后发送给路由器。后续的数据包将包含以下信息：</p><ul><li>源MAC地址：主机的MAC地址。</li><li>目标MAC地址：路由器的MAC地址。</li><li>源IP地址：主机的IP地址。</li><li>目标IP地址：最终目的地的IP地址（可能是另一个网络上的主机或者互联网上的服务器）。</li></ul><p>所以第一次发送广播时，主机是使用自己的IP地址来查询路由器的MAC地址，这个查询是通过ARP请求完成的，而不是直接发送IP数据包。但是那岂不是每次发送数据都要先发一个去询问，这样太麻烦了，所以在后续操作系统会把本次查询结果放到一块叫做 ARP 缓存的内存空间留着以后用，不过缓存的时间就几分钟。也就是说，在发包时：<br>先查询 ARP 缓存，如果其中已经保存了对方的 MAC 地址，就不需要发送 ARP 查询，直接使用 ARP 缓存中的地址。<br>而当 ARP 缓存中不存在对方 MAC 地址时，则发送 ARP 广播查询。<br>缓存也有自己的时间，而且一直将缓存存在本机会浪费内存资源，所以我们需要用到交换机。<br>封装之后数据包变成了下面这个样子<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/img_2.png"></p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>交换机会根据数据帧中的MAC地址，通过查询交换机内部维护的MAC地址表，将数据帧从源设备转发到目的设备。当发送一次之后，交换机就会记住IP与MAC的对应关系，方便后续的查找。<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/img_1.png"></p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>路由器的基本功能是在不同的网络之间转发数据包。当一个数据包到达路由器时，路由器会根据数据包的目的IP地址，通过内部的路由表，路由器根据路由算法和路由协议来选择数据包转发的最佳路径，决定最佳的转发路径，并将数据包发送到下一个网络或目的地。下图是查询路由表决定转发路径<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/img_3.png"><br>路由器可以实现网络地址转换，允许私有网络中的设备使用内部IP地址访问外部网络（如互联网），同时对外隐藏内部网络的结构，这就是所谓的内网穿透。<br>现代路由器基本上都包含了交换机，所以家庭中有一台路由器就可以连接外网，去互联网冲浪，不需要额外的交换机。<br>最后整体封装流程如下<br><img src="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/img_4.png"></p><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>整体流程大致如上，对于计算机网络来说，我真的没写多少东西，全写完太累了，还有很多细节问题需要你们自己探索，例如交换机与路由器分别工作在哪一层，HTTPS的加密方式，如何实现内网穿透，HTTP与RPC调用等等有趣的问题。计算机的世界是探索不完的，我感觉已经要似掉了wwww。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2024/11/09/%E6%A0%91/"/>
    <url>/2024/11/09/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="1、树的基本概念"><a href="#1、树的基本概念" class="headerlink" title="1、树的基本概念"></a>1、树的基本概念</h2><p><strong>1.树的定义</strong></p><p>树是n（n&gt;&#x3D;0）个结点的有限集。当n &#x3D; 0时，称为空树。在任意一棵非空树中应满足：有且仅有一个特定的称为根的结点。</p><p>当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集T1,T2,…,Tm，其中每个集合本身又是一棵树，并且称为根的子树。</p><p>显然，树的定义是递归的，即在树的定义中又用到了自身，树是一种递归的数据结构。树作为一种逻辑结构，同时也是一种分层结构，具有以下两个特点：</p><p>1.树的根结点没有前驱，除根结点外的所有结点有且只有一个前驱。</p><p>2.树中所有结点可以有零个或多个后继。因此n个结点的树中有n-1条边。</p><p><strong>2.树的基本术语</strong></p><p>1.节点：存储数据的单元，可以是任何类型的值。</p><p>2.节点的度：该节点直接相连的边的数量。</p><p>3.根节点：仅有一个根节点，没有父节点，是树的起点。</p><p>4.子树：根节点之外的任意节点都可以作为子树的根，形成独立的树。</p><p>5.叶子节点：没有子节点的节点称为叶节点。</p><p>6.孩子结点或子结点：结点的子树的根称为该结点的孩子结点或子结点。</p><p>7.双亲结点或父结点：若一个结点含有子结点，则这个结点称为其子结点的双亲结点或父结点。</p><p>8.兄弟结点：同一个双亲的孩子之间互称兄弟。</p><p>9.树的深度或高度：树中结点的最大层次。</p><p><img src="/2024/11/09/%E6%A0%91/img.png"></p><p><strong>3.树状结构的应用</strong></p><p><strong>文件系统</strong></p><p>最为基础的应用就是计算机中对文件的管理结构，在计算机的文件系统中，目录和文件以树形结构组织。这种结构不仅便于用户和管理员快速定位、访问和管理文件，还能有效利用存储空间。</p><p><img src="/2024/11/09/%E6%A0%91/img_1.png"></p><p><strong>数据库索引</strong></p><p>数据库系统利用树形结构（如B树、B+树）来构建索引，以加快数据检索的速度。B树和B+树是平衡多路搜索树，它们通过减少磁盘I&#x2F;O操作来提高查询效率。在B树中，每个节点包含多个关键字和子节点指针，所有叶子节点都在同一层。B+树则进一步优化了B树的结构，所有关键字都出现在叶子节点中，并且叶子节点之间通过指针相连，形成了有序链表，这使得范围查询更加高效。</p><p><strong>人工智能</strong></p><p>在人工智能领域，树形结构的应用非常广泛。决策树是一种常用的分类和回归方法，它通过构建一棵树来模拟人类决策过程。决策树的每个节点代表一个决策点，每个分支代表一个可能的决策结果，叶子节点则包含最终的决策输出。随机森林则是由多个决策树组成的集成学习方法，通过多个决策树的投票或平均来提高预测的准确性和鲁棒性。</p><h2 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2.二叉树"></a>2.二叉树</h2><p><strong>1.二叉树的基本概念</strong></p><p>二叉树是一种重要的数据结构，它是由节点组成的，每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树可以为空，也可以只有一个根节点，或者有一个根节点和两个子节点。二叉树的特点是每个节点最多只能有两个子节点，这两个子节点被称为左子树和右子树</p><p><strong>2.遍历二叉树</strong></p><p>二叉树是一种非常重要的数据结构，很多其它数据结构都是基于二叉树的基础演变而来的。对于二叉树，有深度遍历和广度遍历，深度遍历有前序、中序以及后序三种遍历方法，广度遍历即我们平常所说的层次遍历。</p><p>四种主要的遍历思想为：</p><p>前序遍历：根结点 —&gt; 左子树 —&gt; 右子树</p><p>中序遍历：左子树—&gt; 根结点 —&gt; 右子树</p><p>后序遍历：左子树 —&gt; 右子树 —&gt; 根结点</p><p>层次遍历：只需按层次遍历即可</p><p><img src="/2024/11/09/%E6%A0%91/img_2.png"></p><p>前序遍历结果为：A B D E C F G</p><p>中序遍历结果为：D B E A F C G</p><p>后序遍历结果为：D E B F G C A</p><p>层序遍历结果为：A B C D E F G</p><p><img src="/2024/11/09/%E6%A0%91/img_3.png"></p><p>前序遍历结果为：A B D F G H I E C</p><p>中序遍历结果为：F D H G I B E A C</p><p>后序遍历结果为：F H I G D E B C A</p><p><img src="/2024/11/09/%E6%A0%91/img_4.png"></p><p>前序遍历结果为：A B D G H I C E J F</p><p>中序遍历结果为：G D I H B A E J C F</p><p>后序遍历结果为：G I H D B J E F C A</p><h2 id="3-二叉搜索树"><a href="#3-二叉搜索树" class="headerlink" title="3.二叉搜索树"></a>3.二叉搜索树</h2><p><strong>1.基本概念</strong></p><p>二叉搜索树（BST，Binary Search Tree），也称二叉排序树或二叉查找树。<br>二叉搜索树：一棵二叉树，可以为空；如果不为空，满足以下性质：</p><p>非空左子树的所有键值小于其根结点的键值。</p><p>非空右子树的所有键值大于其根结点的键值。</p><p>左、右子树都是二叉搜索树。</p><p><strong>2.代码以及遍历搜索</strong></p><figure class="highlight cpp"><figcaption><span>二叉树代码 [lang:C++] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> data; <span class="hljs-comment">//数据域</span><br>    node* lchild; <span class="hljs-comment">//指向左子树根节点的指针</span><br>    node* rchild; <span class="hljs-comment">//指向右子树根节点的指针</span><br>&#125;;<br><span class="hljs-function">node* <span class="hljs-title">newNode</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> </span>&#123;<br>    node* Node = <span class="hljs-keyword">new</span> node; <span class="hljs-comment">//申请一个node类型变量的地址空间</span><br>    Node-&gt;data = v; <span class="hljs-comment">//结点权值为v</span><br>    Node-&gt;lchild = Node-&gt;rchild = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//初始状态下无左右孩子</span><br>    <span class="hljs-keyword">return</span> Node; <span class="hljs-comment">//返回新节点的地址</span><br>&#125;<br><span class="hljs-function">node* <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> x, node* root)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">/*查找失败*/</span><br>    <span class="hljs-keyword">if</span> (x &gt; root-&gt;data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Find</span>(x, root-&gt;rchild); <span class="hljs-comment">/*在右子树中继续查找*/</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt; root-&gt;data)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Find</span>(x, root-&gt;lchild); <span class="hljs-comment">/*在左子树中继续查找*/</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> root; <span class="hljs-comment">/*查找成功，返回结点的找到结点的地址*/</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(node*&amp; root, <span class="hljs-type">int</span> x)</span> </span>&#123;  <span class="hljs-comment">//注意 传入的是结点指针的引用</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">//空树，即查找失败，插入结点（递归边界）</span><br>        root = <span class="hljs-built_in">newNode</span>(x);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root-&gt;data &gt; x) &#123; <span class="hljs-comment">//往左子树搜索</span><br>        <span class="hljs-built_in">insert</span>(root-&gt;lchild, x);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">insert</span>(root-&gt;rchild, x); <span class="hljs-comment">//往右子树搜索</span><br>&#125;<br><span class="hljs-function">node* <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-type">int</span> data[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    node* root = <span class="hljs-literal">NULL</span>;     <span class="hljs-comment">//新建空根结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">insert</span>(root, data[i]); <span class="hljs-comment">//插入二叉树</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> root; <span class="hljs-comment">//返回根节点</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(node* root)</span> </span>&#123; <span class="hljs-comment">//前序遍历</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//到达空树，即递归边界</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, root-&gt;data); <span class="hljs-comment">//访问根节点数据域</span><br>    <span class="hljs-built_in">preorder</span>(root-&gt;lchild); <span class="hljs-comment">//访问左子树</span><br>    <span class="hljs-built_in">preorder</span>(root-&gt;rchild); <span class="hljs-comment">//访问右子树</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(node* root)</span> </span>&#123; <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//到达空树，即递归边界</span><br>    <span class="hljs-built_in">inorder</span>(root-&gt;lchild); <span class="hljs-comment">//访问左子树</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, root-&gt;data); <span class="hljs-comment">//访问根节点数据域</span><br>    <span class="hljs-built_in">inorder</span>(root-&gt;rchild); <span class="hljs-comment">//访问右子树</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorder</span><span class="hljs-params">(node* root)</span> </span>&#123; <span class="hljs-comment">//后序遍历</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">//到达空树，即递归边界</span><br>    <span class="hljs-built_in">preorder</span>(root-&gt;lchild); <span class="hljs-comment">//访问左子树</span><br>    <span class="hljs-built_in">preorder</span>(root-&gt;rchild); <span class="hljs-comment">//访问右子树</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, root-&gt;data); <span class="hljs-comment">//访问根节点数据域</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> nums[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span> &#125;;<br>    node* root = <span class="hljs-built_in">create</span>(nums, <span class="hljs-built_in">sizeof</span>(nums)/<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">preorder</span>(root);<span class="hljs-comment">//前序遍历</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">inorder</span>(root);    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">postorder</span>(root);<span class="hljs-comment">//后序遍历</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    node* x = <span class="hljs-built_in">Find</span>(<span class="hljs-number">5</span>, root);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.二叉搜索树的问题</strong></p><p>二叉查找树比普通树查找更快，查找、插入、删除的时间复杂度为O（logN）。但是二叉查找树有一种极端的情况，就是会变成一种线性链表似的结构。此时时间复杂度就变成了O（N），为了解决这种情况，出现了二叉平衡树</p><p><img src="/2024/11/09/%E6%A0%91/img_5.png"></p><h2 id="4-平衡二叉树"><a href="#4-平衡二叉树" class="headerlink" title="4.平衡二叉树"></a>4.平衡二叉树</h2><p><strong>1.基本概念</strong></p><p>平衡二叉树也叫AVL树，它或者是一颗空树，或者具有以下性质的二叉排序树：它的左子树和左子树的高度之差(平衡因子)的绝对值不超过1，且它的左子树和右子树都是一颗平衡二叉树。所以由于要维持自身的平衡，所以进行插入和删除结点操作的时候，需要对结点进行频繁的旋转。</p><p><strong>2.平衡因子</strong></p><p>BF（平衡因子）的值为：左子树高度 - 右子树高度</p><p><strong>3.平衡方法</strong></p><p><img src="/2024/11/09/%E6%A0%91/img_6.png"></p><p>当我们在一个平衡二叉树中进行插入和删除操作时，可能会导致它的平衡性被破坏。如上图，本是平衡的，如果我插入了一个新值是30的节点，那么这棵树的平衡性就会被破坏，它一共破坏了节点32和节点25的平衡性，虽然破坏了2个节点的平衡性，但我们只讨论最近被破坏节点的平衡性（因为底下的处理好了，上面的节点平衡性也会随之处理好），即新插入节点30破坏了节点32的平衡性，因为新插入节点而导致平衡性被破坏的节点也叫麻烦节点，而被其破坏平衡的节点叫被破坏节点。一共把破坏平衡型的类型分为了四种，分别是LL型、RR型、LR型和RL型，每一种破坏方式都有对应的旋转方式来保持树的平衡性。</p><p><strong>1.LL型</strong></p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="/2024/11/09/%E6%A0%91/img_7.png"></td><td align="left"><img src="/2024/11/09/%E6%A0%91/img_8.png"></td></tr></tbody></table><p>如上两图图，LL型也为左左型，在被破坏节点的左边的左边插入而导致失衡，则为LL型。</p><p>LL型解决方案：以被破坏节点为基础进行右旋。右旋就是根据某个节点向右旋转。</p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="/2024/11/09/%E6%A0%91/img_9.png"></td><td align="left"><img src="/2024/11/09/%E6%A0%91/img_10.png"></td></tr></tbody></table><p><strong>2.RR型</strong></p><table><thead><tr><th align="center"></th><th align="left"></th></tr></thead><tbody><tr><td align="center"><img src="/2024/11/09/%E6%A0%91/img_11.png"></td><td align="left"><img src="/2024/11/09/%E6%A0%91/img_12.png"></td></tr></tbody></table><p>如上两图图，RR型也为右右型，在被破坏节点的右边的右边插入而导致失衡，则为RR型。</p><p>RR型解决方案：以被破坏节点为基础进行左旋。左旋就是根据某个节点向左旋转。</p><table><thead><tr><th align="center"></th><th align="left"></th></tr></thead><tbody><tr><td align="center"><img src="/2024/11/09/%E6%A0%91/img_13.png"></td><td align="left"><img src="/2024/11/09/%E6%A0%91/img_14.png"></td></tr></tbody></table><p><strong>3.LR型</strong></p><p><img src="/2024/11/09/%E6%A0%91/img_15.png"></p><p>如上图，LR型也为左右型，在被破坏节点的左边的右边插入而导致失衡，则为LR型。</p><p>LR型解决方案：以被破坏节点L（左）节点为基础先进行一次L（左）旋，再以被破坏节点为基础进行右旋。</p><table><thead><tr><th align="left"></th><th align="center"></th></tr></thead><tbody><tr><td align="left"><img src="/2024/11/09/%E6%A0%91/img_16.png"></td><td align="center"><img src="/2024/11/09/%E6%A0%91/img_17.png"></td></tr></tbody></table><p>先以20为基础进行一次左旋。再以25为基础进行一次右旋，可以看出经过两次旋转后，该树已经平衡。</p><p><strong>4.RL型</strong></p><p><img src="/2024/11/09/%E6%A0%91/img_18.png"></p><p>如上图，RL型也为右左型，在被破坏节点的右边的左边插入而导致失衡，则为RL型。</p><p>RL型解决方案：以被破坏节点R（右）节点为基础先进行一次R（右）旋，再以被破坏节点为基础进行左旋。</p><table><thead><tr><th align="left"></th><th align="center"></th></tr></thead><tbody><tr><td align="left"><img src="/2024/11/09/%E6%A0%91/img_19.png"></td><td align="center"><img src="/2024/11/09/%E6%A0%91/img_20.png"></td></tr></tbody></table><p>先以25为基础进行一次右旋。再以20为基础进行一次右旋，可以看出经过两次旋转后，该树已经平衡。</p><p><strong>5.总结</strong></p><p>处理方式分为两大类：</p><p>RR型和LL型，以被破坏节点为基础进行其反向的旋转即可，即RR型进行左旋，LL型进行右旋。</p><p>RL型和LR型，先以被破坏节点的LR或RL首字母的节点进行LR或RL首字母旋转，再以被破坏节点为基础进行LR或RL尾字母旋转，即RL型先以被破坏节点的R（右）节点为基础进行一次R（右）选，再以被破坏节点为基础进行一次L（左）旋；LR旋先以被破坏节点的L（左）节点为基础进行一次L（左）选，再以被破坏节点为基础进行一次R（右）旋。</p><p><strong>4.代码实现</strong></p><figure class="highlight xl"><figcaption><span>平衡二叉树代码 [lang:C++] [title] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs xl">#include&lt;iostream&gt;<br><br>typedef int ElenmentType;<br><span class="hljs-comment">//平衡二叉树的结构</span><br>typedef struct AVLNode &#123;<br>    int depth;<span class="hljs-comment">//深度</span><br>    struct AVLNode* left;<br>    struct AVLNode* right;<br>    struct AVLNode* parent;<br>    ElenmentType value;<br>    <span class="hljs-comment">//构造器</span><br>    AVLNode(ElenmentType value = <span class="hljs-number">0</span>) &#123;<br>    parent = NULL;<br>    depth = <span class="hljs-number">0</span>;<br>    left = right = NULL;<br>    <span class="hljs-function"><span class="hljs-title">this</span>-&gt;</span>value = value;<br>&#125;<br>&#125;Tree;<br>Tree* LL_rotate(Tree* root) &#123;<span class="hljs-comment">//LL执行右旋</span><br>    <span class="hljs-comment">//root是原来的平衡二叉树的根结点</span><br>    Tree* temp;<span class="hljs-comment">//临时变量</span><br>    <span class="hljs-comment">//获取根结点的左孩子</span><br>    <span class="hljs-function"><span class="hljs-title">temp</span> = root-&gt;</span>left;<br>    <span class="hljs-comment">//根结点的左孩子变更为其原来左孩子的右孩子</span><br>    <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span> = temp-&gt;</span>right;<br>    <span class="hljs-comment">//原来的根结点的左孩子变为了根结点</span><br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>right = root;<br>    return temp;<br>&#125;<br>Tree* RR_rotate(Tree* root) &#123;<span class="hljs-comment">//RR执行左旋</span><br>    Tree* temp;<br>    <span class="hljs-function"><span class="hljs-title">temp</span> = root-&gt;</span>right;<span class="hljs-comment">//获取根结点的右孩子</span><br>    <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> = temp-&gt;</span>left;<span class="hljs-comment">//根结点的右孩子变为其原来右孩子的左孩子</span><br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>left = root;<span class="hljs-comment">//原来的根结点的右孩子变为了新的根结点</span><br>    return temp;<br>&#125;<br>Tree* LR_rotate(Tree* root) &#123;<br>    Tree* temp;<br>    <span class="hljs-function"><span class="hljs-title">temp</span> = root-&gt;</span>left;<br>    <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span>left = RR_rotate(temp);<br>    return LL_rotate(root);<br>&#125;<br>Tree* RL_rotate(Tree* root) &#123;<br>    Tree* temp;<br>    <span class="hljs-function"><span class="hljs-title">temp</span> = root-&gt;</span>right;<br>    <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span>right = LL_rotate(temp);<br>    return RR_rotate(root);<br>&#125;<br>int height(const Tree* root)<span class="hljs-comment">//求树高，递归</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (root == NULL)<br>        return <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">return</span> std::max(height(root-&gt;</span>left),<br>    <span class="hljs-function"><span class="hljs-title">height</span>(root-&gt;</span>right)) + <span class="hljs-number">1</span>;<br>&#125;<br>int diff(const Tree* root)<span class="hljs-comment">//求平衡因子，即当前节点左右子树的差</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-title">return</span> height(root-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span>) - height(root-&gt;</span>right);<br>&#125;<br><br>Tree* Balance(Tree* root)<br>&#123;<br>    int balanceFactor = diff(root);<span class="hljs-comment">//diff用来计算平衡因子（左右子树高度差）</span><br>    <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span>)<span class="hljs-comment">//左子树高于右子树</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (diff(root-&gt;</span>left) &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//LL的情况</span><br>        root = LL_rotate(root);<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//LR的情况</span><br>        root = LR_rotate(root);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span>)<span class="hljs-comment">//右子树高于左子树</span><br>    &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (diff(root-&gt;</span>right) &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//RL的情况</span><br>        root = RL_rotate(root);<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//RR的情况</span><br>        root = RR_rotate(root);<br>    &#125;<br>    return root;<br>&#125;<br><span class="hljs-comment">//插入结点</span><br>Tree* Insert(Tree* root, ElenmentType k)<br>&#123;<br>    <span class="hljs-keyword">if</span> (NULL == root)&#123;<br>        root = new AVLNode(k);<span class="hljs-comment">//如果根结点为null，则直接将值为根结点</span><br>        <span class="hljs-keyword">if</span> (root == NULL)<br>        printf(<span class="hljs-string">&quot;创建失败&quot;</span>);<br>        return root;<br>    &#125;<span class="hljs-comment">//递归返回条件</span><br>    <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (k &lt; root-&gt;</span>value)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span> = Insert(root-&gt;</span>left, k);<span class="hljs-comment">//递归左子树</span><br>        <span class="hljs-comment">//balance operation</span><br>        root = Balance(root);<span class="hljs-comment">//平衡操作包含了四种旋转</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (k &gt; root-&gt;</span>value)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> = Insert(root-&gt;</span>right, k);<span class="hljs-comment">//递归右子树</span><br>        <span class="hljs-comment">//balance operation</span><br>        root = Balance(root);<span class="hljs-comment">//平衡操作包含了四种旋转</span><br>    &#125;<br>    return root;<br>&#125;<br><span class="hljs-comment">//中序遍历,获取的数列是有序的</span><br>void displayTree(Tree* node) &#123;<br>    <span class="hljs-keyword">if</span> (node == NULL) return;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (node-&gt;</span>left != NULL) &#123;<br>            <span class="hljs-function"><span class="hljs-title">displayTree</span>(node-&gt;</span>left);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">printf</span>(&quot;%d &quot;, node-&gt;</span>value);<br>    <span class="hljs-function"><span class="hljs-title">if</span> (node-&gt;</span>right != NULL) &#123;<br>            <span class="hljs-function"><span class="hljs-title">displayTree</span>(node-&gt;</span>right);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//查找value，成功则返回该结点</span><br>Tree* binaryTreeSearch(Tree* node, int value) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (node-&gt;</span>value == value)<br>    return node;<br>    <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (node-&gt;</span>value &gt; value) &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (node-&gt;</span>left != NULL)<br>        <span class="hljs-function"><span class="hljs-title">return</span> binaryTreeSearch(node-&gt;</span>left, value);<br>        <span class="hljs-keyword">else</span> return NULL;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (node-&gt;</span>right != NULL)<br>        <span class="hljs-function"><span class="hljs-title">return</span> binaryTreeSearch(node-&gt;</span>right, value);<br>        <span class="hljs-keyword">else</span><br>        return NULL;<br>    &#125;<br>&#125;<br>int main() &#123;<br>    int a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>,<span class="hljs-number">44</span>,<span class="hljs-number">77</span>,<span class="hljs-number">99</span>,<span class="hljs-number">33</span>,<span class="hljs-number">46</span>,<span class="hljs-number">79</span> &#125;;<br>    Tree* root = NULL;<br>    printf(<span class="hljs-string">&quot;第一次构建的平衡二叉树中序遍历：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    root = Insert(root, a[i]);<br>    &#125;<br>    displayTree(root);<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">//查找33</span><br>    int value = <span class="hljs-number">33</span>;<br>    Tree* obj;<br>    <span class="hljs-keyword">if</span> ((obj = binaryTreeSearch(root, value)) == NULL) &#123;<br>    printf(<span class="hljs-string">&quot;%d值不存在&quot;</span>, value);<br>    &#125;<br>    <span class="hljs-keyword">else</span> printf(<span class="hljs-string">&quot;%d值存在,地址是%p&quot;</span>, value, obj);<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    root = Insert(root, <span class="hljs-number">5</span>);<br>    printf(<span class="hljs-string">&quot;插入了结点值为5的结点以后，中序遍历：&quot;</span>);<br>    displayTree(root); <br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-B树"><a href="#5-B树" class="headerlink" title="5.B树"></a>5.B树</h2><p><strong>1.概述</strong></p><p>B树也称B-树,它是一颗多路平衡查找树。我们描述一颗B树时需要指定它的阶数，阶数表示了一个结点最多有多少个孩子结点，一般用字母m表示阶数。当m取2时，就是我们常见的二叉搜索树。</p><p><strong>2.特点</strong></p><p>多路平衡树：多路平衡树其实就是多叉平衡树，每个节点都有多个指向孩子节点的指针以及键值。通常，一颗m阶的B树有k个子节点，有k-1个关键字，而k的取值范围为[ceil(m&#x2F;2),m]（celi表示向上取整）。例如一颗3阶的B树，最多有3个孩子2个关键字。</p><p>键值有序：每个节点中包含多个关键字，这些关键字是有序的。节点中每个关键字都将子节点切割成两部分，左边部分的节点的所有关键字的值一定是小于该关键字的，右边节点的所有关键字的值都是大于该关键字的，这一点跟二叉搜索树的性质相同。</p><p>树的高度平衡：所有叶子节点的深度都是一样的，站在AVL树的角度讲，每个节点的平衡因子都是0。</p><p>高效的磁盘读写：B树被设计用于在磁盘上高效的存储和读取数据。通过每个节点都有多个键值和多个字节的指针，从而减少磁盘的读写次数，以提高读写效率。</p><p><strong>3.定义</strong></p><p>一颗m阶的B树定义如下：</p><p>1）每个结点最多有m-1个key。</p><p>2）根结点最少可以只有1个key。</p><p>3）非根结点至少有Math.ceil(m&#x2F;2)-1个key。</p><p>4）每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</p><p>5）所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度都相同。</p><p><img src="/2024/11/09/%E6%A0%91/img_21.png"></p><p>上图是一颗阶数为4的B树。在实际应用中的B树的阶数m都非常大（通常大于100），所以即使存储大量的数据，B树的高度仍然比较小。每个结点中存储了关键字（key）和关键字对应的数据（data），以及孩子结点的指针。我们将一个key和其对应的data称为一个记录。在数据库中我们将B树（和B+树）作为索引结构，可以加快查询速度，此时B树中的key就表示键，而data表示了这个键对应的条目在硬盘上的逻辑地址。</p><p><strong>4.插入操作</strong></p><p>插入操作是指插入一条记录，即（key, value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key,则一定是在叶子结点中进行插入操作。</p><p>1）根据要插入的key的值，找到叶子结点并插入。</p><p>2）判断当前结点key的个数是否小于等于m-1，若满足则结束，否则进行第3步。</p><p>3）以结点中间的key为中心分裂成左右两部分，然后将这个中间的key插入到父结点中，这个key的左子树指向分裂后的左半部分，这个key的右子支指向分裂后的右半部分，然后将当前结点指向父结点，继续进行第3步。</p><p>a）在空树中插入39</p><p><img src="/2024/11/09/%E6%A0%91/img_22.png"></p><p>此时根结点就一个key，此时根结点也是叶子结点</p><p>b）继续插入22，97和41</p><p><img src="/2024/11/09/%E6%A0%91/img_23.png"></p><p>根结点此时有4个key</p><p>c）继续插入53</p><p>插入后超过了最大允许的关键字个数4，所以以key值为41为中心进行分裂，结果如下图所示，分裂后当前结点指针指向父结点，满足B树条件，插入操作结束。当阶数m为偶数时，需要分裂时就不存在排序恰好在中间的key，那么我们选择中间位置的前一个key或中间位置的后一个key为中心进行分裂即可。</p><p><img src="/2024/11/09/%E6%A0%91/img_24.png"></p><p>d）依次插入13，21，40，同样会造成分裂，结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_25.png"></p><p>e）依次插入30，27, 33 ；36，35，34 ；24，29，结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_26.png"></p><p>f）插入key值为26的记录，插入后的结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_27.png"></p><p>当前结点需要以27为中心分裂，并向父结点进位27，然后当前结点指向父结点，结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_28.png"></p><p>进位后导致当前结点（即根结点）也需要分裂，分裂的结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_29.png"></p><p>分裂后当前结点指向新的根，此时无需调整。</p><p>g）最后再依次插入key为17,28,29,31,32的记录，结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_30.png"></p><p><strong>5.删除操作</strong></p><p>删除操作是指，根据key删除记录，如果B树中的记录中不存对应key的记录，则删除失败。</p><p>1）如果当前需要删除的key位于非叶子结点上，则用后继key（这里的后继key均指后继记录的意思）覆盖要删除的key，然后在后继key所在的子支中删除该后继key。此时后继key一定位于叶子结点上，这个过程和二叉搜索树删除结点的方式类似。删除这个记录后执行第2步</p><p>2）该结点key个数大于等于Math.ceil(m&#x2F;2)-1，结束删除操作，否则执行第3步。</p><p>3）如果兄弟结点key个数大于Math.ceil(m&#x2F;2)-1，则父结点中的key下移到该结点，兄弟结点中的一个key上移，删除操作结束。</p><p>否则，将父结点中的key下移与当前结点及它的兄弟结点中的key合并，形成一个新的结点。原父结点中的key的两个孩子指针就变成了一个孩子指针，指向这个新结点。然后当前结点的指针指向父结点，重复上第2步。</p><p>有些结点它可能即有左兄弟，又有右兄弟，那么我们任意选择一个兄弟结点进行操作即可。</p><p>下面以5阶B树为例，介绍B树的删除操作，5阶B树中，结点最多有4个key,最少有2个key</p><p>a）原始状态</p><p><img src="/2024/11/09/%E6%A0%91/img_31.png"></p><p>b）在上面的B树中删除21，删除后结点中的关键字个数仍然大于等2，所以删除结束。</p><p><img src="/2024/11/09/%E6%A0%91/img_32.png"></p><p>c）在上述情况下接着删除27。从上图可知27位于非叶子结点中，所以用27的后继替换它。从图中可以看出，27的后继为28，我们用28替换27，然后在28（原27）的右孩子结点中删除28。删除后的结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_33.png"></p><p>删除后发现，当前叶子结点的记录的个数小于2，而它的兄弟结点中有3个记录（当前结点还有一个右兄弟，选择右兄弟就会出现合并结点的情况，不论选哪一个都行，只是最后B树的形态会不一样而已），我们可以从兄弟结点中借取一个key。所以父结点中的28下移，兄弟结点中的26上移,删除结束。结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_34.png"></p><p>d）在上述情况下接着32，结果如下图。</p><p><img src="/2024/11/09/%E6%A0%91/img_35.png"></p><p>当删除后，当前结点中只key，而兄弟结点中也仅有2个key。所以只能让父结点中的30下移和这个两个孩子结点中的key合并，成为一个新的结点，当前结点的指针指向父结点。结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_36.png"></p><p>当前结点key的个数满足条件，故删除结束。</p><p>e）上述情况下，我们接着删除key为40的记录，删除后结果如下图所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_37.png"></p><p>同理，当前结点的记录数小于2，兄弟结点中没有多余key，所以父结点中的key下移，和兄弟（这里我们选择左兄弟，选择右兄弟也可以）结点合并，合并后的指向当前结点的指针就指向了父结点。</p><p><img src="/2024/11/09/%E6%A0%91/img_38.png"></p><p>同理，对于当前结点而言只能继续合并了，最后结果如下所示。</p><p><img src="/2024/11/09/%E6%A0%91/img_39.png"></p><p>合并后结点当前结点满足条件，删除结束。</p><p><strong>6.查找操作</strong></p><p>以查找6为例子：</p><p><img src="/2024/11/09/%E6%A0%91/img_40.png"></p><p>B树的查找包括两个基本操作： ① 在B树中找结点 ② 在结点中找关键字。</p><p>更具体的说，根据指针拿到一个结点，是一次磁盘I&#x2F;O，即第①个动作是在磁盘上进行的；根据有序关键字查找目标，是一次顺序查找或二分查找，即第②个动作是在内存中进行的。</p><p>这时，你是不是已经明白了为什么数据库要使用B树而非二叉搜索树呢？</p><p>B树和二叉查找树的目的都是查找，查找算法的瓶颈是什么呢？比较的次数。但是，数据库查询的瓶颈是什么呢？磁盘I&#x2F;O的次数。在内存中比较的时间，在磁盘I&#x2F;O的时间面前完全可以忽略。况且，B-Tree和BST在比较次数上其实相差无几。</p><p>把B-Tree和BST摆在一起不难看出，B-Tree比BST矮胖的多。高度更小，说明磁盘I&#x2F;O次数越少，自然性能越好！当数据库非常非常非常大时，B树的一个结点就是放在一个磁盘块上的，对于磁盘I&#x2F;O次数的节省也会到达极致。</p><h2 id="6-B-树"><a href="#6-B-树" class="headerlink" title="6.B+树"></a>6.B+树</h2><p><strong>1.特点</strong><br>B+ 树与 B 树差异的点，主要是以下这几点：</p><ol><li>叶子节点（最底部的节点）才会存放实际数据（索引+记录），非叶子节点只会存放索引。</li><li>所有索引都会在叶子节点出现，叶子节点之间构成一个有序链表。</li><li>非叶子节点的索引也会同时存在在子节点中，并且是在子节点中所有索引的最大（或最小）。</li><li>非叶子节点中有多少个子节点，就有多少个索引。<br><img src="/2024/11/09/%E6%A0%91/img_41.png"><br><strong>2.在存储上的优势</strong><br>MySQL数据库里的InnoDB存储引擎就是使用B+树进行数据存储的。<br>下面通过三个方面，比较下 B+ 和 B 树的性能区别。<br><strong>1、单点查询</strong><br>B 树进行单个索引查询时，最快可以在 O(1) 的时间代价内就查到，而从平均时间代价来看，会比 B+ 树稍快一些。但是 B 树的查询波动会比较大，因为每个节点即存索引又存记录，所以有时候访问到了非叶子节点就可以找到索引，而有时需要访问到叶子节点才能找到索引。B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I&#x2F;O次数会更少。<br><strong>2、插入和删除效率</strong><br>B+ 树有大量的冗余节点，这样使得删除一个节点的时候，可以直接从叶子节点中删除，甚至可以不动非叶子节点，这样删除非常快。<br>B 树则不同，B 树没有冗余节点，删除节点的时候非常复杂，比如删除根节点中的数据，可能涉及复杂的树的变形，比如下面这个动图是删除 B 树根节点的过程：<br><strong>3、范围查询</strong><br>B 树和 B+ 树等值查询原理基本一致，先从根节点查找，然后对比目标数据的范围，最后递归的进入子节点查找。因为 B+ 树所有叶子节点间还有一个链表进行连接，这种设计对范围查找非常有帮助，比如说我们想知道 12 月 1 日和 12 月 12 日之间的订单，这个时候可以先查找到 12 月 1 日所在的叶子节点，然后利用链表向右遍历，直到找到 12 月12 日的节点，这样就不需要从根节点查询了，进一步节省查询需要的时间。而 B 树没有将所有叶子节点用链表串联起来的结构，因此只能通过树的遍历来完成范围查询，这会涉及多个节点的磁盘 I&#x2F;O 操作，范围查询效率不如 B+ 树。因此，存在大量范围检索的场景，适合使用 B+树，比如数据库。而对于大量的单个索引查询的场景，可以考虑 B 树，比如 nosql 的MongoDB。</li></ol><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p>二分查找树虽然是一个天然的二分结构，能很好的利用二分查找快速定位数据，但是它存在一种极端的情况，每当插入的元素都是树内最大的元素，就会导致二分查找树退化成一个链表，此时查询复杂度就会从 O(logn)降低为 O(n)。<br>为了解决二分查找树退化成链表的问题，就出现了平衡二叉树，保证了查询操作的时间复杂度就会一直维持在 O(logn) 。但是它本质上还是一个二叉树，每个节点只能有 2 个子节点，随着元素的增多，树的高度会越来越高。而树的高度决定于磁盘 I&#x2F;O 操作的次数，因为树是存储在磁盘中的，访问每个节点，都对应一次磁盘 I&#x2F;O 操作，也就是说树的高度就等于每次查询数据时磁盘 IO 操作的次数，所以树的高度越高，就会影响查询性能。<br>B 树和 B+ 都是通过多叉树的方式，会将树的高度变矮，所以这两个数据结构非常适合检索存于磁盘中的数据。但是 MySQL 默认的存储引擎 InnoDB 采用的是 B+ 作为索引的数据结构。<br>原因有：</p><ol><li>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I&#x2F;O次数会更少。</li><li>B+ 树有大量的冗余节点（所有非叶子节点都是冗余索引），这些冗余索引让 B+ 树在插入、删除的效率都更高，比如删除根节点的时候，不会像 B 树那样会发生复杂的树的变化。</li><li>B+ 树叶子节点之间用链表连接了起来，有利于范围查询，而 B 树要实现范围查询，因此只能通过树的遍历来完成范围查询，这会涉及多个节点的磁盘 I&#x2F;O 操作，范围查询效率不如 B+ 树。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2024/11/08/post/"/>
    <url>/2024/11/08/post/</url>
    
    <content type="html"><![CDATA[<p>hello world</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
