<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2024/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/"/>
    <url>/2024/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2024/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/11/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p>![[Pasted image 20241110190125.png]]<br>先展示一下这个经典结构，然后用一个数据包的一生来逐一解释整个计算机网络</p><h1 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h1><h2 id="HTTP-Hypertext-Transfer-Protocol-超文本传输协议"><a href="#HTTP-Hypertext-Transfer-Protocol-超文本传输协议" class="headerlink" title="HTTP(Hypertext Transfer Protocol)超文本传输协议"></a>HTTP(Hypertext Transfer Protocol)超文本传输协议</h2><p>当我们打开一个网站时，会输入一个网址，这个网址就是url<br>![[Pasted image 20241110220019.png]]<br>url代表了我们要向服务器请求的资源，对url进行解析后，确定了请求信息，接下来就可以遵循HTTP协议把这些信息封装成一个HTTP请求，而请求主要是GET请求，POST请求，还有PUT请求，DELETE请求等，但是最常用的就是GET，POST请求，一个POST请求由请求行，请求头，请求头三部分构成，而GET请求没有请求体。</p><p>&#x3D;&#x3D;下图就是一个POST请求的报文形式。&#x3D;&#x3D;<br>![[Pasted image 20241110221245.png]]</p><p>这样一个请求数据包就诞生了，接下来就需要为他指路，让他知道请求的是哪个服务器</p><h2 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h2><p>我们平时打开网页时都是输入的网址，例如<a href="http://www.baidu.com但是计算机是无法识别域名的,在计算机的网络中只有ip/">www.baidu.com但是计算机是无法识别域名的，在计算机的网络中只有IP</a>, MAC地址可以被解读，那么我们就要想办法将域名解析为服务器IP，这时候就用到了DNS解析。接下来讲解一下DNS解析的步骤。</p><ol><li><strong>第一步</strong><br>本地电脑会检查浏览器缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就结束。浏览器缓存域名也是有限制的，不仅浏览器缓存大小有限制，而且缓存的时间也有限制，通常情况下为几分钟到几小时不等，域名被缓存的时间限制可以通过TTL属性来设置。这个缓存时间太长和太短都不太好，如果时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有一部分用户无法访问网站。如果设置时间太短，会导致用户每次访问网站都要重新解析一次域名。</li><li><strong>第二步</strong><br>如果浏览器缓存中没有数据，浏览器会查找操作系统缓存中是否有这个域名对应的DNS解析结果。</li><li><strong>第三步</strong><br>前两个过程无法解析时，就要用到我们网络配置中的”DNS服务器地址”了。操作系统会把这个域名发送给这个本地DNS服务器。每个完整的内网通常都会配置本地DNS服务器。它们一般都会缓存域名解析结果，当然缓存时间是受到域名的失效时间控制的。大约80%的域名解析到这里就结束了，后续的DNS迭代和递归也是由本地DNS服务器负责。</li><li><strong>第四步</strong><br>如果本地DNS服务器仍然没有命中，就直接到根DNS服务器请求解析。</li><li><strong>第五步</strong><br>根DNS服务器返回给本地DNS域名服务器一个顶级DNS服务器地址，它是国际顶级域名服务器，如.com、.cn、.org等，全球只有13台左右。</li><li><strong>第六步</strong><br>本地DNS服务器再向上一步获得的顶级DNS服务器发送解析请求。接受请求的顶级DNS服务器查找并返回此域名对应的Name Server域名服务器的地址，这个Name Server服务器就是我要访问的网站域名提供商的服务器，其实该域名的解析任务就是由域名提供商的服务器来完成。   比如我要访问<a href="http://www.baidu.com,而这个域名是从a公司注册获得的,那么a公司上的服务器就会有www.baidu.com的相关信息./">www.baidu.com，而这个域名是从A公司注册获得的，那么A公司上的服务器就会有www.baidu.com的相关信息。</a></li><li><strong>第七步</strong><br>Name Server服务器会查询存储的域名和IP的映射关系表，再把查询出来的域名和IP地址等等信息，连同一个TTL值返回给本地DNS服务器。本地DNS服务器会缓存这个域名和IP的对应关系，缓存时间由TTL值控制。</li><li><strong>第八步</strong><br>把解析的结果返回给本地电脑，本地电脑根据TTL值缓存在本地系统缓存中，域名解析过程结束在实际的DNS解析过程中，可能还不止这10步，如Name Server可能有很多级，或者有一个GTM来负载均衡控制，这都有可能会影响域名解析过程</li></ol><p>&#x3D;&#x3D;下图为一个DNS解析的流程&#x3D;&#x3D;<br>![[Pasted image 20241110223235.png]]</p><p>这样数据包就找到了自己的目的地了。而HTTP(HTTPS)协议和DNS协议就是在&#x3D;&#x3D;应用层&#x3D;&#x3D;上的协议</p><h1 id="2-传输层"><a href="#2-传输层" class="headerlink" title="2.传输层"></a>2.传输层</h1><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP协议就是工作在传输层上的协议，TCP协议是面向连接的可靠协议，所以在发送数据之前要先与目标服务器进行TCP连接，就是经典的三次握手，三次握手目的是保证双方都有发送和接收的能力。&#x3D;&#x3D;下图前三次就是建立握手的过程&#x3D;&#x3D;<br>![[Pasted image 20241110224644.png]]<br>&#x3D;&#x3D;下图是一个简单的TCP建立连接的模型&#x3D;&#x3D;<br>![[Pasted image 20241110224730.png]]<br>接下来解读一下TCP头部</p><h3 id="TCP头部字段"><a href="#TCP头部字段" class="headerlink" title="TCP头部字段"></a>TCP头部字段</h3><p>![[Pasted image 20241110225009.png]]<br>首先，源端口号和目标端口号是不可少的，如果没有这两个端口号，数据就不知道应该发给哪个应用。<br>接下来有包的序号，这个是为了解决包乱序的问题。<br>还有应该有的是确认号，目的是确认发出去对方是否有收到。如果没有收到就应该重新发送，直到送达，这个是为了解决丢包的问题。<br>接下来还有一些状态位。例如 SYN 是发起一个连接，ACK 是回复，RST 是重新连接，FIN 是结束连接等。TCP 是面向连接的，因而双方要维护连接的状态，这些带状态位的包的发送，会引起双方的状态变更。<br>还有一个重要的就是窗口大小。TCP 要做流量控制，通信双方各声明一个窗口（缓存大小），作用是为了解决发送方和接收方速度不同而导致的数据丢失问题,当发送方发送的太快,接收方来不及接受就会导致数据丢失。<br>除了做流量控制以外，TCP还会做拥塞控制，为了解决过多的数据注入到网络导致网络崩溃和超负荷问题。<br>接下来讲解一下流量控制和拥塞控制<br><strong>流量控制</strong><br>发送端会根据自己的实际情况发送数据，但因为接收端接收不过来的话，接收方只能把处理不过来的数据存在缓存区里。如果缓存区都满了对方还在疯狂发送数据，接收方只能把收到的数据包丢掉，这就造成了网络资源的浪费！典型的场景如以太网场景中10G设备向1G设备发TCP包。<br>为了防止这种现象的发生，TCP 提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量。这就是所谓的流量控制。<br>它的具体操作是：<br>（1）接收端主机向发送端主机通知自已可以接收数据的大小；<br>（2）于是发送端会发送不超过这个限度的数据，该大小限度就被称作窗口大小。窗口大小的值由接收端主机决定，而在TCP 首部中，就有一个字段用来通知窗口大小<br>![[Pasted image 20241110225641.png]]<br>（3）接收主机将自己可以接收的缓冲区大小放入这个字段中通知给发送端，这个字段的值越大，说明网络的吞吐量越高。<br>不过，接收端的这个缓冲区一旦面临数据溢出时，窗口大小的值也会随之被设置为一个更小的值通知给发送端，从而控制数据发送量。也就是说，发送端主机会根据接收端主机的指示，对发送数据的量进行控制。这也就形成了一个完整的TCP流控制(流量控制)。当Window&#x3D;0时，即告知发送方停止发送数据。<br><strong>拥塞控制</strong><br>先了解两个概念：<br>拥塞窗口（cwnd）：发送方维持的一个状态变量，其大小取决于网络的拥塞程度，并且动态变化。<br>慢开始门限（ssthresh）：为了防止拥塞窗口cwnd的增长过大引起网络拥塞所设置的一个门限值。<br>通过四种算法实现拥塞管理：<br>1.慢开始<br>2.拥塞避免<br>3.超时重传（1988年TCP Tahoe版本，已废弃不用）<br>4.快重传（1990年Reno版本，在用）<br>5.快恢复（1990年Reno版本，在用）<br>也就是说发送方会动态判定网络状态并按照上述算法调整TCP的发包节奏，那么如何确认使用算法呢？如下：<br>当cwnd &lt; ssthresh时，使用慢开始算法；<br>当cwnd &gt; ssthresh时，停止使用慢开始算法而改用拥塞避免算法；<br>当cwnd &#x3D; ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。</p><ol><li><strong>慢开始</strong><br>发送方先探测网络拥塞程度，并不是一开始就发送大量的数据，发送方会根据拥塞程度增大拥塞窗口cwnd。<br>计算方法：每经过一个传输轮次cwnd值就加倍，让cwnd值呈指数增加。<br>![[Pasted image 20241110231829.png]]<br>如上图，大体过程：<br> 1.当前发送方cwnd值为1，因此只能发送一个数据报文段（拥塞窗口cwnd值是几就能发送几个数据段）<br>2.接收方收到该数据报文段后回复一个确认报文段，发送方收到该确认报文后，将cwnd值变为2(加倍)；<br>3.发送方此时可以连续发送两个数据段，接收方收到该数据段后一次发回2个确认报文段；<br>4.发送方收到这两个确认报文后，将cwnd值加2变为4（加倍）后可以连续发送4个数据段，以此类推直至cwnd&#x3D;ssthresh。</li><li><strong>拥塞避免</strong><br>继上图达到cwnd≥ssthresh后采用该算法用来控制拥塞窗口的增长速率。<br>计算方法：每经过一个传输轮次cwnd值加1，让cwnd值呈线性缓慢增大。<br>![[Pasted image 20241110232026.png]]</li><li><strong>拥塞发生</strong><br>当网络发生拥塞丢包时（如图假定cwnd&#x3D;24）<br><strong>● 快重传和快恢复（1990年TCP Reno版本，在用）</strong><br>超时重传算法直接把cwnd减小到1太过强烈，若还能收到连续3个ACK说明网络质量没那么差。同时采用快重传和快恢复算法，过程如下：</li></ol><p>（1）当发送方连续收到3个重复确认时即执行“乘法减小”算法，把慢开始门限ssthresh 减半；<br>（2）由于发送方现在认为网络不那么差，于是把cwnd值设置为开始门限ssthresh 减半后的数值；<br>（3）开始执行拥塞避免算法 (“加法增大”)使拥塞窗口缓慢地线性增大。<br>![[Pasted image 20241110232211.png]]<br>这样就解释完了TCP协议的所有字段。</p><h3 id="TCP-分割数据"><a href="#TCP-分割数据" class="headerlink" title="TCP 分割数据"></a>TCP 分割数据</h3><p>如果 HTTP 请求消息比较长，超过了 MSS 的长度，这时 TCP 就需要把 HTTP 的数据拆解成一块块的数据发送，而不是一次性发送所有数据。<br>MTU：一个网络包的最大长度，以太网中一般为 1500 字节。<br>MSS：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。<br>![[Pasted image 20241110232538.png]]</p><h3 id="TCP报文组装"><a href="#TCP报文组装" class="headerlink" title="TCP报文组装"></a>TCP报文组装</h3><p>将TCP报文和之前的HTTP报文组装在一起，TCP协议就完成了他的任务了。<br>![[Pasted image 20241110232710.png]]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>树</title>
    <link href="/2024/11/09/%E6%A0%91/"/>
    <url>/2024/11/09/%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><strong>树 副本</strong></p><p><strong>1、树的基本概念</strong></p><p><strong>1.树的定义</strong></p><p>树是n（n&gt;&#x3D;0）个结点的有限集。当n &#x3D; 0时，称为空树。在任意一棵非空树中应满足：有且仅有一个特定的称为根的结点。</p><p>当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集T1,T2,…,Tm，其中每个集合本身又是一棵树，并且称为根的子树。</p><p>显然，树的定义是递归的，即在树的定义中又用到了自身，树是一种递归的数据结构。树作为一种逻辑结构，同时也是一种分层结构，具有以下两个特点：</p><p>1.树的根结点没有前驱，除根结点外的所有结点有且只有一个前驱。</p><p>2.树中所有结点可以有零个或多个后继。因此n个结点的树中有n-1条边。</p><p><strong>2.树的基本术语</strong></p><p>1.节点：存储数据的单元，可以是任何类型的值。</p><p>2.节点的度：该节点直接相连的边的数量。</p><p>3.根节点：仅有一个根节点，没有父节点，是树的起点。</p><p>4.子树：根节点之外的任意节点都可以作为子树的根，形成独立的树。</p><p>5.叶子节点：没有子节点的节点称为叶节点。</p><p>6.孩子结点或子结点：结点的子树的根称为该结点的孩子结点或子结点。</p><p>7.双亲结点或父结点：若一个结点含有子结点，则这个结点称为其子结点的双亲结点或父结点。</p><p>8.兄弟结点：同一个双亲的孩子之间互称兄弟。</p><p>9.树的深度或高度：树中结点的最大层次。</p><p><img src="/media/image1.png"></p><p><strong>3.树状结构的应用</strong></p><p><strong>文件系统</strong></p><p>最为基础的应用就是计算机中对文件的管理结构，在计算机的文件系统中，目录和文件以树形结构组织。这种结构不仅便于用户和管理员快速定位、访问和管理文件，还能有效利用存储空间。</p><p><img src="/media/image2.png"></p><p><strong>数据库索引</strong></p><p>数据库系统利用树形结构（如B树、B+树）来构建索引，以加快数据检索的速度。B树和B+树是平衡多路搜索树，它们通过减少磁盘I&#x2F;O操作来提高查询效率。在B树中，每个节点包含多个关键字和子节点指针，所有叶子节点都在同一层。B+树则进一步优化了B树的结构，所有关键字都出现在叶子节点中，并且叶子节点之间通过指针相连，形成了有序链表，这使得范围查询更加高效。</p><p><strong>人工智能</strong></p><p>在人工智能领域，树形结构的应用非常广泛。决策树是一种常用的分类和回归方法，它通过构建一棵树来模拟人类决策过程。决策树的每个节点代表一个决策点，每个分支代表一个可能的决策结果，叶子节点则包含最终的决策输出。随机森林则是由多个决策树组成的集成学习方法，通过多个决策树的投票或平均来提高预测的准确性和鲁棒性。</p><p><strong>2.二叉树</strong></p><p><strong>1.二叉树的基本概念</strong></p><p>二叉树是一种重要的数据结构，它是由节点组成的，每个节点最多有两个子节点，分别是左子节点和右子节点。二叉树可以为空，也可以只有一个根节点，或者有一个根节点和两个子节点。二叉树的特点是每个节点最多只能有两个子节点，这两个子节点被称为左子树和右子树</p><p><strong>2.遍历二叉树</strong></p><p>二叉树是一种非常重要的数据结构，很多其它数据结构都是基于二叉树的基础演变而来的。对于二叉树，有深度遍历和广度遍历，深度遍历有前序、中序以及后序三种遍历方法，广度遍历即我们平常所说的层次遍历。</p><p>四种主要的遍历思想为：</p><p>前序遍历：根结点 —&gt; 左子树 —&gt; 右子树</p><p>中序遍历：左子树—&gt; 根结点 —&gt; 右子树</p><p>后序遍历：左子树 —&gt; 右子树 —&gt; 根结点</p><p>层次遍历：只需按层次遍历即可</p><p><img src="/media/image3.png"></p><p>前序遍历结果为：A B D E C F G</p><p>中序遍历结果为：D B E A F C G</p><p>后序遍历结果为：D E B F G C A</p><p>层序遍历结果为：A B C D E F G</p><p><img src="/media/image4.png"></p><p>前序遍历结果为：A B D F G H I E C</p><p>中序遍历结果为：F D H G I B E A C</p><p>后序遍历结果为：F H I G D E B C A</p><p><img src="/media/image5.png"></p><p>前序遍历结果为：A B D G H I C E J F</p><p>中序遍历结果为：G D I H B A E J C F</p><p>后序遍历结果为：G I H D B J E F C A</p><p><strong>3.二叉搜索树</strong></p><p><strong>1.基本概念</strong></p><p>二叉搜索树（BST，Binary Search Tree），也称二叉排序树或二叉查找树。<br>二叉搜索树：一棵二叉树，可以为空；如果不为空，满足以下性质：</p><p>非空左子树的所有键值小于其根结点的键值。</p><p>非空右子树的所有键值大于其根结点的键值。</p><p>左、右子树都是二叉搜索树。</p><p><strong>2.代码以及遍历搜索</strong></p><p>[TABLE]</p><p><strong>3.二叉搜索树的问题</strong></p><p>二叉查找树比普通树查找更快，查找、插入、删除的时间复杂度为O（logN）。但是二叉查找树有一种极端的情况，就是会变成一种线性链表似的结构。此时时间复杂度就变成了O（N），为了解决这种情况，出现了二叉平衡树</p><p><img src="/media/image6.png"></p><p><strong>4.平衡二叉树</strong></p><p><strong>1.基本概念</strong></p><p>平衡二叉树也叫AVL树，它或者是一颗空树，或者具有以下性质的二叉排序树：它的左子树和左子树的高度之差(平衡因子)的绝对值不超过1，且它的左子树和右子树都是一颗平衡二叉树。所以由于要维持自身的平衡，所以进行插入和删除结点操作的时候，需要对结点进行频繁的旋转。</p><p><strong>2.平衡因子</strong></p><p>BF（平衡因子）的值为：左子树高度 - 右子树高度</p><p><strong>3.平衡方法</strong></p><p><img src="/media/image7.png"></p><p>当我们在一个平衡二叉树中进行插入和删除操作时，可能会导致它的平衡性被破坏。如上图，本是平衡的，如果我插入了一个新值是30的节点，那么这棵树的平衡性就会被破坏，它一共破坏了节点32和节点25的平衡性，虽然破坏了2个节点的平衡性，但我们只讨论最近被破坏节点的平衡性（因为底下的处理好了，上面的节点平衡性也会随之处理好），即新插入节点30破坏了节点32的平衡性，因为新插入节点而导致平衡性被破坏的节点也叫麻烦节点，而被其破坏平衡的节点叫被破坏节点。一共把破坏平衡型的类型分为了四种，分别是LL型、RR型、LR型和RL型，每一种破坏方式都有对应的旋转方式来保持树的平衡性。</p><p><strong>1.LL型</strong></p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="/media/image8.png"></td><td align="left"><img src="/media/image9.png"></td></tr></tbody></table><p>如上两图图，LL型也为左左型，在被破坏节点的左边的左边插入而导致失衡，则为LL型。</p><p>LL型解决方案：以被破坏节点为基础进行右旋。右旋就是根据某个节点向右旋转。</p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><img src="/media/image10.png"></td><td align="left"><img src="/media/image11.png"></td></tr></tbody></table><p><strong>2.RR型</strong></p><table><thead><tr><th align="center"></th><th align="left"></th></tr></thead><tbody><tr><td align="center"><img src="/media/image12.png"></td><td align="left"><img src="/media/image13.png"></td></tr></tbody></table><p>如上两图图，RR型也为右右型，在被破坏节点的右边的右边插入而导致失衡，则为RR型。</p><p>RR型解决方案：以被破坏节点为基础进行左旋。左旋就是根据某个节点向左旋转。</p><table><thead><tr><th align="center"></th><th align="left"></th></tr></thead><tbody><tr><td align="center"><img src="/media/image14.png"></td><td align="left"><img src="/media/image15.png"></td></tr></tbody></table><p><strong>3.LR型</strong></p><p><img src="/media/image16.png"></p><p>如上图，LR型也为左右型，在被破坏节点的左边的右边插入而导致失衡，则为LR型。</p><p>LR型解决方案：以被破坏节点L（左）节点为基础先进行一次L（左）旋，再以被破坏节点为基础进行右旋。</p><table><thead><tr><th align="left"></th><th align="center"></th></tr></thead><tbody><tr><td align="left"><img src="/media/image17.png"></td><td align="center"><img src="/media/image18.png"></td></tr></tbody></table><p>先以20为基础进行一次左旋。再以25为基础进行一次右旋，可以看出经过两次旋转后，该树已经平衡。</p><p><strong>4.RL型</strong></p><p><img src="/media/image19.png"></p><p>如上图，RL型也为右左型，在被破坏节点的右边的左边插入而导致失衡，则为RL型。</p><p>RL型解决方案：以被破坏节点R（右）节点为基础先进行一次R（右）旋，再以被破坏节点为基础进行左旋。</p><table><thead><tr><th align="left"></th><th align="center"></th></tr></thead><tbody><tr><td align="left"><img src="/media/image20.png"></td><td align="center"><img src="/media/image21.png"></td></tr></tbody></table><p>先以25为基础进行一次右旋。再以20为基础进行一次右旋，可以看出经过两次旋转后，该树已经平衡。</p><p><strong>5.总结</strong></p><p>处理方式分为两大类：</p><p>RR型和LL型，以被破坏节点为基础进行其反向的旋转即可，即RR型进行左旋，LL型进行右旋。</p><p>RL型和LR型，先以被破坏节点的LR或RL首字母的节点进行LR或RL首字母旋转，再以被破坏节点为基础进行LR或RL尾字母旋转，即RL型先以被破坏节点的R（右）节点为基础进行一次R（右）选，再以被破坏节点为基础进行一次L（左）旋；LR旋先以被破坏节点的L（左）节点为基础进行一次L（左）选，再以被破坏节点为基础进行一次R（右）旋。</p><p><strong>4.代码实现</strong></p><p>[TABLE]</p><p><strong>5.B树</strong></p><p><strong>1.概述</strong></p><p>B树也称B-树,它是一颗多路平衡查找树。我们描述一颗B树时需要指定它的阶数，阶数表示了一个结点最多有多少个孩子结点，一般用字母m表示阶数。当m取2时，就是我们常见的二叉搜索树。</p><p><strong>2.特点</strong></p><p>多路平衡树：多路平衡树其实就是多叉平衡树，每个节点都有多个指向孩子节点的指针以及键值。通常，一颗m阶的B树有k个子节点，有k-1个关键字，而k的取值范围为[ceil(m&#x2F;2),m]（celi表示向上取整）。例如一颗3阶的B树，最多有3个孩子2个关键字。</p><p>键值有序：每个节点中包含多个关键字，这些关键字是有序的。节点中每个关键字都将子节点切割成两部分，左边部分的节点的所有关键字的值一定是小于该关键字的，右边节点的所有关键字的值都是大于该关键字的，这一点跟二叉搜索树的性质相同。</p><p>树的高度平衡：所有叶子节点的深度都是一样的，站在AVL树的角度讲，每个节点的平衡因子都是0。</p><p>高效的磁盘读写：B树被设计用于在磁盘上高效的存储和读取数据。通过每个节点都有多个键值和多个字节的指针，从而减少磁盘的读写次数，以提高读写效率。</p><p><strong>3.定义</strong></p><p>一颗m阶的B树定义如下：</p><p>1）每个结点最多有m-1个key。</p><p>2）根结点最少可以只有1个key。</p><p>3）非根结点至少有Math.ceil(m&#x2F;2)-1个key。</p><p>4）每个结点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</p><p>5）所有叶子结点都位于同一层，或者说根结点到每个叶子结点的长度都相同。</p><p><img src="/media/image22.png"></p><p>上图是一颗阶数为4的B树。在实际应用中的B树的阶数m都非常大（通常大于100），所以即使存储大量的数据，B树的高度仍然比较小。每个结点中存储了关键字（key）和关键字对应的数据（data），以及孩子结点的指针。我们将一个key和其对应的data称为一个记录。在数据库中我们将B树（和B+树）作为索引结构，可以加快查询速度，此时B树中的key就表示键，而data表示了这个键对应的条目在硬盘上的逻辑地址。</p><p><strong>4.插入操作</strong></p><p>插入操作是指插入一条记录，即（key, value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key,则一定是在叶子结点中进行插入操作。</p><p>1）根据要插入的key的值，找到叶子结点并插入。</p><p>2）判断当前结点key的个数是否小于等于m-1，若满足则结束，否则进行第3步。</p><p>3）以结点中间的key为中心分裂成左右两部分，然后将这个中间的key插入到父结点中，这个key的左子树指向分裂后的左半部分，这个key的右子支指向分裂后的右半部分，然后将当前结点指向父结点，继续进行第3步。</p><p>a）在空树中插入39</p><p><img src="/media/image23.png"></p><p>此时根结点就一个key，此时根结点也是叶子结点</p><p>b）继续插入22，97和41</p><p><img src="/media/image24.png"></p><p>根结点此时有4个key</p><p>c）继续插入53</p><p>插入后超过了最大允许的关键字个数4，所以以key值为41为中心进行分裂，结果如下图所示，分裂后当前结点指针指向父结点，满足B树条件，插入操作结束。当阶数m为偶数时，需要分裂时就不存在排序恰好在中间的key，那么我们选择中间位置的前一个key或中间位置的后一个key为中心进行分裂即可。</p><p><img src="/media/image25.png"></p><p>d）依次插入13，21，40，同样会造成分裂，结果如下图所示。</p><p><img src="/media/image26.png"></p><p>e）依次插入30，27, 33 ；36，35，34 ；24，29，结果如下图所示。</p><p><img src="/media/image27.png"></p><p>f）插入key值为26的记录，插入后的结果如下图所示。</p><p><img src="/media/image28.png"></p><p>当前结点需要以27为中心分裂，并向父结点进位27，然后当前结点指向父结点，结果如下图所示。</p><p><img src="/media/image29.png"></p><p>进位后导致当前结点（即根结点）也需要分裂，分裂的结果如下图所示。</p><p><img src="/media/image30.png"></p><p>分裂后当前结点指向新的根，此时无需调整。</p><p>g）最后再依次插入key为17,28,29,31,32的记录，结果如下图所示。</p><p><img src="/media/image31.png"></p><p><strong>5.删除操作</strong></p><p>删除操作是指，根据key删除记录，如果B树中的记录中不存对应key的记录，则删除失败。</p><p>1）如果当前需要删除的key位于非叶子结点上，则用后继key（这里的后继key均指后继记录的意思）覆盖要删除的key，然后在后继key所在的子支中删除该后继key。此时后继key一定位于叶子结点上，这个过程和二叉搜索树删除结点的方式类似。删除这个记录后执行第2步</p><p>2）该结点key个数大于等于Math.ceil(m&#x2F;2)-1，结束删除操作，否则执行第3步。</p><p>3）如果兄弟结点key个数大于Math.ceil(m&#x2F;2)-1，则父结点中的key下移到该结点，兄弟结点中的一个key上移，删除操作结束。</p><p>否则，将父结点中的key下移与当前结点及它的兄弟结点中的key合并，形成一个新的结点。原父结点中的key的两个孩子指针就变成了一个孩子指针，指向这个新结点。然后当前结点的指针指向父结点，重复上第2步。</p><p>有些结点它可能即有左兄弟，又有右兄弟，那么我们任意选择一个兄弟结点进行操作即可。</p><p>下面以5阶B树为例，介绍B树的删除操作，5阶B树中，结点最多有4个key,最少有2个key</p><p>a）原始状态</p><p><img src="/media/image32.png"></p><p>b）在上面的B树中删除21，删除后结点中的关键字个数仍然大于等2，所以删除结束。</p><p><img src="/media/image33.png"></p><p>c）在上述情况下接着删除27。从上图可知27位于非叶子结点中，所以用27的后继替换它。从图中可以看出，27的后继为28，我们用28替换27，然后在28（原27）的右孩子结点中删除28。删除后的结果如下图所示。</p><p><img src="/media/image34.png"></p><p>删除后发现，当前叶子结点的记录的个数小于2，而它的兄弟结点中有3个记录（当前结点还有一个右兄弟，选择右兄弟就会出现合并结点的情况，不论选哪一个都行，只是最后B树的形态会不一样而已），我们可以从兄弟结点中借取一个key。所以父结点中的28下移，兄弟结点中的26上移,删除结束。结果如下图所示。</p><p><img src="/media/image35.png"></p><p>d）在上述情况下接着32，结果如下图。</p><p><img src="/media/image36.png"></p><p>当删除后，当前结点中只key，而兄弟结点中也仅有2个key。所以只能让父结点中的30下移和这个两个孩子结点中的key合并，成为一个新的结点，当前结点的指针指向父结点。结果如下图所示。</p><p><img src="/media/image37.png"></p><p>当前结点key的个数满足条件，故删除结束。</p><p>e）上述情况下，我们接着删除key为40的记录，删除后结果如下图所示。</p><p><img src="/media/image38.png"></p><p>同理，当前结点的记录数小于2，兄弟结点中没有多余key，所以父结点中的key下移，和兄弟（这里我们选择左兄弟，选择右兄弟也可以）结点合并，合并后的指向当前结点的指针就指向了父结点。</p><p><img src="/media/image39.png"></p><p>同理，对于当前结点而言只能继续合并了，最后结果如下所示。</p><p><img src="/media/image40.png"></p><p>合并后结点当前结点满足条件，删除结束。</p><p><strong>6.查找操作</strong></p><p>以查找6为例子：</p><p><img src="/media/image41.png"></p><p>B树的查找包括两个基本操作： ① 在B树中找结点 ② 在结点中找关键字。</p><p>更具体的说，根据指针拿到一个结点，是一次磁盘I&#x2F;O，即第①个动作是在磁盘上进行的；根据有序关键字查找目标，是一次顺序查找或二分查找，即第②个动作是在内存中进行的。</p><p>这时，你是不是已经明白了为什么数据库要使用B树而非二叉搜索树呢？</p><p>B树和二叉查找树的目的都是查找，查找算法的瓶颈是什么呢？比较的次数。但是，数据库查询的瓶颈是什么呢？磁盘I&#x2F;O的次数。在内存中比较的时间，在磁盘I&#x2F;O的时间面前完全可以忽略。况且，B-Tree和BST在比较次数上其实相差无几。</p><p>把B-Tree和BST摆在一起不难看出，B-Tree比BST矮胖的多。高度更小，说明磁盘I&#x2F;O次数越少，自然性能越好！当数据库非常非常非常大时，B树的一个结点就是放在一个磁盘块上的，对于磁盘I&#x2F;O次数的节省也会到达极致。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2024/11/08/post/"/>
    <url>/2024/11/08/post/</url>
    
    <content type="html"><![CDATA[<p>hello world</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
